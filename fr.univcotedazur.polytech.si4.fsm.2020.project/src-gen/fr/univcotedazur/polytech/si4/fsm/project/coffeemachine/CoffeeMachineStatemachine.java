/** Generated by YAKINDU Statechart Tools code generator. */
package fr.univcotedazur.polytech.si4.fsm.project.coffeemachine;

import fr.univcotedazur.polytech.si4.fsm.project.ITimer;
import java.util.LinkedList;
import java.util.List;

public class CoffeeMachineStatemachine implements ICoffeeMachineStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private List<SCInterfaceListener> listeners = new LinkedList<SCInterfaceListener>();
		
		public List<SCInterfaceListener> getListeners() {
			return listeners;
		}
		private boolean orderDelivered;
		
		
		public void raiseOrderDelivered() {
			synchronized(CoffeeMachineStatemachine.this) {
				orderDelivered = true;
			}
		}
		
		private boolean sliderModified;
		
		
		public void raiseSliderModified() {
			synchronized(CoffeeMachineStatemachine.this) {
				sliderModified = true;
			}
		}
		
		private boolean removeCup;
		
		
		public void raiseRemoveCup() {
			synchronized(CoffeeMachineStatemachine.this) {
				removeCup = true;
			}
		}
		
		private boolean drinkSelectionDone;
		
		
		public void raiseDrinkSelectionDone() {
			synchronized(CoffeeMachineStatemachine.this) {
				drinkSelectionDone = true;
			}
		}
		
		private boolean optionSelection;
		
		
		public void raiseOptionSelection() {
			synchronized(CoffeeMachineStatemachine.this) {
				optionSelection = true;
			}
		}
		
		private boolean addCoin;
		
		
		public void raiseAddCoin() {
			synchronized(CoffeeMachineStatemachine.this) {
				addCoin = true;
			}
		}
		
		private boolean notEnough;
		
		
		public void raiseNotEnough() {
			synchronized(CoffeeMachineStatemachine.this) {
				notEnough = true;
			}
		}
		
		private boolean cancel;
		
		
		public void raiseCancel() {
			synchronized(CoffeeMachineStatemachine.this) {
				cancel = true;
			}
		}
		
		private boolean nFC;
		
		
		public void raiseNFC() {
			synchronized(CoffeeMachineStatemachine.this) {
				nFC = true;
			}
		}
		
		private boolean doPrepareForNextOrder;
		
		
		public boolean isRaisedDoPrepareForNextOrder() {
			synchronized(CoffeeMachineStatemachine.this) {
				return doPrepareForNextOrder;
			}
		}
		
		protected void raiseDoPrepareForNextOrder() {
			synchronized(CoffeeMachineStatemachine.this) {
				doPrepareForNextOrder = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoPrepareForNextOrderRaised();
				}
			}
		}
		
		private boolean doResetOperation;
		
		
		public boolean isRaisedDoResetOperation() {
			synchronized(CoffeeMachineStatemachine.this) {
				return doResetOperation;
			}
		}
		
		protected void raiseDoResetOperation() {
			synchronized(CoffeeMachineStatemachine.this) {
				doResetOperation = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoResetOperationRaised();
				}
			}
		}
		
		private boolean doResetDrinkSelected;
		
		
		public boolean isRaisedDoResetDrinkSelected() {
			synchronized(CoffeeMachineStatemachine.this) {
				return doResetDrinkSelected;
			}
		}
		
		protected void raiseDoResetDrinkSelected() {
			synchronized(CoffeeMachineStatemachine.this) {
				doResetDrinkSelected = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoResetDrinkSelectedRaised();
				}
			}
		}
		
		private boolean doResetPayment;
		
		
		public boolean isRaisedDoResetPayment() {
			synchronized(CoffeeMachineStatemachine.this) {
				return doResetPayment;
			}
		}
		
		protected void raiseDoResetPayment() {
			synchronized(CoffeeMachineStatemachine.this) {
				doResetPayment = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoResetPaymentRaised();
				}
			}
		}
		
		private boolean doCheckPayment;
		
		
		public boolean isRaisedDoCheckPayment() {
			synchronized(CoffeeMachineStatemachine.this) {
				return doCheckPayment;
			}
		}
		
		protected void raiseDoCheckPayment() {
			synchronized(CoffeeMachineStatemachine.this) {
				doCheckPayment = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoCheckPaymentRaised();
				}
			}
		}
		
		private boolean doResetSliders;
		
		
		public boolean isRaisedDoResetSliders() {
			synchronized(CoffeeMachineStatemachine.this) {
				return doResetSliders;
			}
		}
		
		protected void raiseDoResetSliders() {
			synchronized(CoffeeMachineStatemachine.this) {
				doResetSliders = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoResetSlidersRaised();
				}
			}
		}
		
		private boolean doWaitForRecuperation;
		
		
		public boolean isRaisedDoWaitForRecuperation() {
			synchronized(CoffeeMachineStatemachine.this) {
				return doWaitForRecuperation;
			}
		}
		
		protected void raiseDoWaitForRecuperation() {
			synchronized(CoffeeMachineStatemachine.this) {
				doWaitForRecuperation = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoWaitForRecuperationRaised();
				}
			}
		}
		
		private boolean noActionFor45sec;
		
		
		public boolean isRaisedNoActionFor45sec() {
			synchronized(CoffeeMachineStatemachine.this) {
				return noActionFor45sec;
			}
		}
		
		protected void raiseNoActionFor45sec() {
			synchronized(CoffeeMachineStatemachine.this) {
				noActionFor45sec = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onNoActionFor45secRaised();
				}
			}
		}
		
		private boolean doNextPreparationStep;
		
		
		public boolean isRaisedDoNextPreparationStep() {
			synchronized(CoffeeMachineStatemachine.this) {
				return doNextPreparationStep;
			}
		}
		
		protected void raiseDoNextPreparationStep() {
			synchronized(CoffeeMachineStatemachine.this) {
				doNextPreparationStep = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoNextPreparationStepRaised();
				}
			}
		}
		
		private boolean doPrintNextStep;
		
		
		public boolean isRaisedDoPrintNextStep() {
			synchronized(CoffeeMachineStatemachine.this) {
				return doPrintNextStep;
			}
		}
		
		protected void raiseDoPrintNextStep() {
			synchronized(CoffeeMachineStatemachine.this) {
				doPrintNextStep = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoPrintNextStepRaised();
				}
			}
		}
		
		private boolean okForExpressoStep1;
		
		public synchronized boolean getOkForExpressoStep1() {
			synchronized(CoffeeMachineStatemachine.this) {
				return okForExpressoStep1;
			}
		}
		
		public void setOkForExpressoStep1(boolean value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.okForExpressoStep1 = value;
			}
		}
		
		private boolean okForExpressoStep2;
		
		public synchronized boolean getOkForExpressoStep2() {
			synchronized(CoffeeMachineStatemachine.this) {
				return okForExpressoStep2;
			}
		}
		
		public void setOkForExpressoStep2(boolean value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.okForExpressoStep2 = value;
			}
		}
		
		private boolean okForExpressoStep3;
		
		public synchronized boolean getOkForExpressoStep3() {
			synchronized(CoffeeMachineStatemachine.this) {
				return okForExpressoStep3;
			}
		}
		
		public void setOkForExpressoStep3(boolean value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.okForExpressoStep3 = value;
			}
		}
		
		private boolean okForTeaStep1;
		
		public synchronized boolean getOkForTeaStep1() {
			synchronized(CoffeeMachineStatemachine.this) {
				return okForTeaStep1;
			}
		}
		
		public void setOkForTeaStep1(boolean value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.okForTeaStep1 = value;
			}
		}
		
		private boolean okForTeaStep2;
		
		public synchronized boolean getOkForTeaStep2() {
			synchronized(CoffeeMachineStatemachine.this) {
				return okForTeaStep2;
			}
		}
		
		public void setOkForTeaStep2(boolean value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.okForTeaStep2 = value;
			}
		}
		
		private boolean okForTeaStep3;
		
		public synchronized boolean getOkForTeaStep3() {
			synchronized(CoffeeMachineStatemachine.this) {
				return okForTeaStep3;
			}
		}
		
		public void setOkForTeaStep3(boolean value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.okForTeaStep3 = value;
			}
		}
		
		private boolean okForTeaStep4;
		
		public synchronized boolean getOkForTeaStep4() {
			synchronized(CoffeeMachineStatemachine.this) {
				return okForTeaStep4;
			}
		}
		
		public void setOkForTeaStep4(boolean value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.okForTeaStep4 = value;
			}
		}
		
		private boolean okForTeaStep5;
		
		public synchronized boolean getOkForTeaStep5() {
			synchronized(CoffeeMachineStatemachine.this) {
				return okForTeaStep5;
			}
		}
		
		public void setOkForTeaStep5(boolean value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.okForTeaStep5 = value;
			}
		}
		
		private boolean okForSoupeStep3;
		
		public synchronized boolean getOkForSoupeStep3() {
			synchronized(CoffeeMachineStatemachine.this) {
				return okForSoupeStep3;
			}
		}
		
		public void setOkForSoupeStep3(boolean value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.okForSoupeStep3 = value;
			}
		}
		
		private boolean okForCoffeeStep1;
		
		public synchronized boolean getOkForCoffeeStep1() {
			synchronized(CoffeeMachineStatemachine.this) {
				return okForCoffeeStep1;
			}
		}
		
		public void setOkForCoffeeStep1(boolean value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.okForCoffeeStep1 = value;
			}
		}
		
		private boolean okForCoffeeStep2;
		
		public synchronized boolean getOkForCoffeeStep2() {
			synchronized(CoffeeMachineStatemachine.this) {
				return okForCoffeeStep2;
			}
		}
		
		public void setOkForCoffeeStep2(boolean value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.okForCoffeeStep2 = value;
			}
		}
		
		private boolean okForCoffeeStep3;
		
		public synchronized boolean getOkForCoffeeStep3() {
			synchronized(CoffeeMachineStatemachine.this) {
				return okForCoffeeStep3;
			}
		}
		
		public void setOkForCoffeeStep3(boolean value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.okForCoffeeStep3 = value;
			}
		}
		
		private boolean okForSoupStep1;
		
		public synchronized boolean getOkForSoupStep1() {
			synchronized(CoffeeMachineStatemachine.this) {
				return okForSoupStep1;
			}
		}
		
		public void setOkForSoupStep1(boolean value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.okForSoupStep1 = value;
			}
		}
		
		private boolean okForSoupStep2;
		
		public synchronized boolean getOkForSoupStep2() {
			synchronized(CoffeeMachineStatemachine.this) {
				return okForSoupStep2;
			}
		}
		
		public void setOkForSoupStep2(boolean value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.okForSoupStep2 = value;
			}
		}
		
		private boolean okForSoupStep3;
		
		public synchronized boolean getOkForSoupStep3() {
			synchronized(CoffeeMachineStatemachine.this) {
				return okForSoupStep3;
			}
		}
		
		public void setOkForSoupStep3(boolean value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.okForSoupStep3 = value;
			}
		}
		
		private boolean readyToDeliver;
		
		public synchronized boolean getReadyToDeliver() {
			synchronized(CoffeeMachineStatemachine.this) {
				return readyToDeliver;
			}
		}
		
		public void setReadyToDeliver(boolean value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.readyToDeliver = value;
			}
		}
		
		private long wftTime;
		
		public synchronized long getWftTime() {
			synchronized(CoffeeMachineStatemachine.this) {
				return wftTime;
			}
		}
		
		public void setWftTime(long value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.wftTime = value;
			}
		}
		
		private long cpTime;
		
		public synchronized long getCpTime() {
			synchronized(CoffeeMachineStatemachine.this) {
				return cpTime;
			}
		}
		
		public void setCpTime(long value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.cpTime = value;
			}
		}
		
		private long stdTime;
		
		public synchronized long getStdTime() {
			synchronized(CoffeeMachineStatemachine.this) {
				return stdTime;
			}
		}
		
		public void setStdTime(long value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.stdTime = value;
			}
		}
		
		private long pwfsTime;
		
		public synchronized long getPwfsTime() {
			synchronized(CoffeeMachineStatemachine.this) {
				return pwfsTime;
			}
		}
		
		public void setPwfsTime(long value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.pwfsTime = value;
			}
		}
		
		private long pwftTime;
		
		public synchronized long getPwftTime() {
			synchronized(CoffeeMachineStatemachine.this) {
				return pwftTime;
			}
		}
		
		public void setPwftTime(long value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.pwftTime = value;
			}
		}
		
		private long ppTime;
		
		public synchronized long getPpTime() {
			synchronized(CoffeeMachineStatemachine.this) {
				return ppTime;
			}
		}
		
		public void setPpTime(long value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.ppTime = value;
			}
		}
		
		private long whTime;
		
		public synchronized long getWhTime() {
			synchronized(CoffeeMachineStatemachine.this) {
				return whTime;
			}
		}
		
		public void setWhTime(long value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.whTime = value;
			}
		}
		
		private long gmTime;
		
		public synchronized long getGmTime() {
			synchronized(CoffeeMachineStatemachine.this) {
				return gmTime;
			}
		}
		
		public void setGmTime(long value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.gmTime = value;
			}
		}
		
		private long spTime;
		
		public synchronized long getSpTime() {
			synchronized(CoffeeMachineStatemachine.this) {
				return spTime;
			}
		}
		
		public void setSpTime(long value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.spTime = value;
			}
		}
		
		private long gtTime;
		
		public synchronized long getGtTime() {
			synchronized(CoffeeMachineStatemachine.this) {
				return gtTime;
			}
		}
		
		public void setGtTime(long value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.gtTime = value;
			}
		}
		
		private long wfiTime;
		
		public synchronized long getWfiTime() {
			synchronized(CoffeeMachineStatemachine.this) {
				return wfiTime;
			}
		}
		
		public void setWfiTime(long value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.wfiTime = value;
			}
		}
		
		private long swdTime;
		
		public synchronized long getSwdTime() {
			synchronized(CoffeeMachineStatemachine.this) {
				return swdTime;
			}
		}
		
		public void setSwdTime(long value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.swdTime = value;
			}
		}
		
		private long icTime;
		
		public synchronized long getIcTime() {
			synchronized(CoffeeMachineStatemachine.this) {
				return icTime;
			}
		}
		
		public void setIcTime(long value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.icTime = value;
			}
		}
		
		private long mTime;
		
		public synchronized long getMTime() {
			synchronized(CoffeeMachineStatemachine.this) {
				return mTime;
			}
		}
		
		public void setMTime(long value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.mTime = value;
			}
		}
		
		private boolean paymentChecked;
		
		public synchronized boolean getPaymentChecked() {
			synchronized(CoffeeMachineStatemachine.this) {
				return paymentChecked;
			}
		}
		
		public void setPaymentChecked(boolean value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.paymentChecked = value;
			}
		}
		
		private boolean milk;
		
		public synchronized boolean getMilk() {
			synchronized(CoffeeMachineStatemachine.this) {
				return milk;
			}
		}
		
		public void setMilk(boolean value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.milk = value;
			}
		}
		
		private boolean iceCream;
		
		public synchronized boolean getIceCream() {
			synchronized(CoffeeMachineStatemachine.this) {
				return iceCream;
			}
		}
		
		public void setIceCream(boolean value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.iceCream = value;
			}
		}
		
		protected void clearEvents() {
			orderDelivered = false;
			sliderModified = false;
			removeCup = false;
			drinkSelectionDone = false;
			optionSelection = false;
			addCoin = false;
			notEnough = false;
			cancel = false;
			nFC = false;
		}
		protected void clearOutEvents() {
		
		doPrepareForNextOrder = false;
		doResetOperation = false;
		doResetDrinkSelected = false;
		doResetPayment = false;
		doCheckPayment = false;
		doResetSliders = false;
		doWaitForRecuperation = false;
		noActionFor45sec = false;
		doNextPreparationStep = false;
		doPrintNextStep = false;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		order_part_Rdy_for_order,
		order_part_Rdy_for_order_NoActionDetection_NoActionDetected,
		order_part_Rdy_for_order_NoActionDetection_ActionDetected,
		order_part_Rdy_for_order_ss_SlidersDefault,
		order_part_Rdy_for_order_ss_SlidersCustomed,
		order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectionWaiting,
		order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected,
		order_part_Rdy_for_order_PaymentGestion_PaymentWaiting,
		order_part_Rdy_for_order_PaymentGestion_CheckPayment,
		order_part_Rdy_for_order_PaymentGestion_paimentChecked,
		order_part_Preparation,
		order_part_Preparation_DrinkMaking_Initialization,
		order_part_Preparation_DrinkMaking_Step2,
		order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperatureDone,
		order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperature,
		order_part_Preparation_DrinkMaking_Step2_r2_CupPositionningDone,
		order_part_Preparation_DrinkMaking_Step2_r2_CupPositionning,
		order_part_Preparation_DrinkMaking_Step2_r3_GrainTampingDone,
		order_part_Preparation_DrinkMaking_Step2_r3_GrainTamping,
		order_part_Preparation_DrinkMaking_Step3,
		order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrink,
		order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrinkDone,
		order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSize,
		order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSizeDone,
		order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTime,
		order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTimeDone,
		order_part_Preparation_DrinkMaking_Step3_Option_croutons,
		order_part_Preparation_DrinkMaking_Step3_Option_croutonsDone,
		order_part_Preparation_DrinkMaking_Step1,
		order_part_Preparation_DrinkMaking_Step1_r1_PodPositionningDone,
		order_part_Preparation_DrinkMaking_Step1_r1_PodPositionning,
		order_part_Preparation_DrinkMaking_Step1_r2_WaterHeatingDone,
		order_part_Preparation_DrinkMaking_Step1_r2_WaterHeating,
		order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionningDone,
		order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionning,
		order_part_Preparation_DrinkMaking_Step1_r4_GrainMashing,
		order_part_Preparation_DrinkMaking_Step1_r4_GrainMashingDone,
		order_part_Preparation_DrinkMaking_Step4,
		order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusion,
		order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusionDone,
		order_part_Preparation_DrinkMaking_Step5,
		order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawal,
		order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawalDone,
		order_part_Preparation_DrinkMaking_IceCream,
		order_part_Preparation_DrinkMaking_Milk,
		order_part_waitingForRecuperation,
		$NullState$
	};
	
	private final State[] stateVector = new State[4];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[22];
	
	public CoffeeMachineStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		for (int i = 0; i < 4; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCInterface.setOkForExpressoStep1(false);
		
		sCInterface.setOkForExpressoStep2(false);
		
		sCInterface.setOkForExpressoStep3(false);
		
		sCInterface.setOkForTeaStep1(false);
		
		sCInterface.setOkForTeaStep2(false);
		
		sCInterface.setOkForTeaStep3(false);
		
		sCInterface.setOkForTeaStep4(false);
		
		sCInterface.setOkForTeaStep5(false);
		
		sCInterface.setOkForSoupeStep3(false);
		
		sCInterface.setOkForCoffeeStep1(false);
		
		sCInterface.setOkForCoffeeStep2(false);
		
		sCInterface.setOkForCoffeeStep3(false);
		
		sCInterface.setOkForSoupStep1(false);
		
		sCInterface.setOkForSoupStep2(false);
		
		sCInterface.setOkForSoupStep3(false);
		
		sCInterface.setReadyToDeliver(false);
		
		sCInterface.setWftTime(10000);
		
		sCInterface.setCpTime(1000);
		
		sCInterface.setStdTime(500);
		
		sCInterface.setPwfsTime(5000);
		
		sCInterface.setPwftTime(3000);
		
		sCInterface.setPpTime(1000);
		
		sCInterface.setWhTime(15000);
		
		sCInterface.setGmTime(6000);
		
		sCInterface.setSpTime(1000);
		
		sCInterface.setGtTime(4000);
		
		sCInterface.setWfiTime(15000);
		
		sCInterface.setSwdTime(2000);
		
		sCInterface.setIcTime(4000);
		
		sCInterface.setMTime(2000);
		
		sCInterface.setPaymentChecked(false);
		
		sCInterface.setMilk(false);
		
		sCInterface.setIceCream(false);
	}
	
	public synchronized void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_Order_part_default();
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case order_part_Rdy_for_order_NoActionDetection_NoActionDetected:
				order_part_Rdy_for_order_NoActionDetection_NoActionDetected_react(true);
				break;
			case order_part_Rdy_for_order_NoActionDetection_ActionDetected:
				order_part_Rdy_for_order_NoActionDetection_ActionDetected_react(true);
				break;
			case order_part_Rdy_for_order_ss_SlidersDefault:
				order_part_Rdy_for_order_ss_SlidersDefault_react(true);
				break;
			case order_part_Rdy_for_order_ss_SlidersCustomed:
				order_part_Rdy_for_order_ss_SlidersCustomed_react(true);
				break;
			case order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectionWaiting:
				order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectionWaiting_react(true);
				break;
			case order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected:
				order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected_react(true);
				break;
			case order_part_Rdy_for_order_PaymentGestion_PaymentWaiting:
				order_part_Rdy_for_order_PaymentGestion_PaymentWaiting_react(true);
				break;
			case order_part_Rdy_for_order_PaymentGestion_CheckPayment:
				order_part_Rdy_for_order_PaymentGestion_CheckPayment_react(true);
				break;
			case order_part_Rdy_for_order_PaymentGestion_paimentChecked:
				order_part_Rdy_for_order_PaymentGestion_paimentChecked_react(true);
				break;
			case order_part_Preparation_DrinkMaking_Initialization:
				order_part_Preparation_DrinkMaking_Initialization_react(true);
				break;
			case order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperatureDone:
				order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperatureDone_react(true);
				break;
			case order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperature:
				order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperature_react(true);
				break;
			case order_part_Preparation_DrinkMaking_Step2_r2_CupPositionningDone:
				order_part_Preparation_DrinkMaking_Step2_r2_CupPositionningDone_react(true);
				break;
			case order_part_Preparation_DrinkMaking_Step2_r2_CupPositionning:
				order_part_Preparation_DrinkMaking_Step2_r2_CupPositionning_react(true);
				break;
			case order_part_Preparation_DrinkMaking_Step2_r3_GrainTampingDone:
				order_part_Preparation_DrinkMaking_Step2_r3_GrainTampingDone_react(true);
				break;
			case order_part_Preparation_DrinkMaking_Step2_r3_GrainTamping:
				order_part_Preparation_DrinkMaking_Step2_r3_GrainTamping_react(true);
				break;
			case order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrink:
				order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrink_react(true);
				break;
			case order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrinkDone:
				order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrinkDone_react(true);
				break;
			case order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSize:
				order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSize_react(true);
				break;
			case order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSizeDone:
				order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSizeDone_react(true);
				break;
			case order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTime:
				order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTime_react(true);
				break;
			case order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTimeDone:
				order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTimeDone_react(true);
				break;
			case order_part_Preparation_DrinkMaking_Step3_Option_croutons:
				order_part_Preparation_DrinkMaking_Step3_Option_croutons_react(true);
				break;
			case order_part_Preparation_DrinkMaking_Step3_Option_croutonsDone:
				order_part_Preparation_DrinkMaking_Step3_Option_croutonsDone_react(true);
				break;
			case order_part_Preparation_DrinkMaking_Step1_r1_PodPositionningDone:
				order_part_Preparation_DrinkMaking_Step1_r1_PodPositionningDone_react(true);
				break;
			case order_part_Preparation_DrinkMaking_Step1_r1_PodPositionning:
				order_part_Preparation_DrinkMaking_Step1_r1_PodPositionning_react(true);
				break;
			case order_part_Preparation_DrinkMaking_Step1_r2_WaterHeatingDone:
				order_part_Preparation_DrinkMaking_Step1_r2_WaterHeatingDone_react(true);
				break;
			case order_part_Preparation_DrinkMaking_Step1_r2_WaterHeating:
				order_part_Preparation_DrinkMaking_Step1_r2_WaterHeating_react(true);
				break;
			case order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionningDone:
				order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionningDone_react(true);
				break;
			case order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionning:
				order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionning_react(true);
				break;
			case order_part_Preparation_DrinkMaking_Step1_r4_GrainMashing:
				order_part_Preparation_DrinkMaking_Step1_r4_GrainMashing_react(true);
				break;
			case order_part_Preparation_DrinkMaking_Step1_r4_GrainMashingDone:
				order_part_Preparation_DrinkMaking_Step1_r4_GrainMashingDone_react(true);
				break;
			case order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusion:
				order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusion_react(true);
				break;
			case order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusionDone:
				order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusionDone_react(true);
				break;
			case order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawal:
				order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawal_react(true);
				break;
			case order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawalDone:
				order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawalDone_react(true);
				break;
			case order_part_Preparation_DrinkMaking_IceCream:
				order_part_Preparation_DrinkMaking_IceCream_react(true);
				break;
			case order_part_Preparation_DrinkMaking_Milk:
				order_part_Preparation_DrinkMaking_Milk_react(true);
				break;
			case order_part_waitingForRecuperation:
				order_part_waitingForRecuperation_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public synchronized void exit() {
		exitSequence_Order_part();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NullState$||stateVector[1] != State.$NullState$||stateVector[2] != State.$NullState$||stateVector[3] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCInterface.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case order_part_Rdy_for_order:
			return stateVector[0].ordinal() >= State.
					order_part_Rdy_for_order.ordinal()&& stateVector[0].ordinal() <= State.order_part_Rdy_for_order_PaymentGestion_paimentChecked.ordinal();
		case order_part_Rdy_for_order_NoActionDetection_NoActionDetected:
			return stateVector[0] == State.order_part_Rdy_for_order_NoActionDetection_NoActionDetected;
		case order_part_Rdy_for_order_NoActionDetection_ActionDetected:
			return stateVector[0] == State.order_part_Rdy_for_order_NoActionDetection_ActionDetected;
		case order_part_Rdy_for_order_ss_SlidersDefault:
			return stateVector[1] == State.order_part_Rdy_for_order_ss_SlidersDefault;
		case order_part_Rdy_for_order_ss_SlidersCustomed:
			return stateVector[1] == State.order_part_Rdy_for_order_ss_SlidersCustomed;
		case order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectionWaiting:
			return stateVector[2] == State.order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectionWaiting;
		case order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected:
			return stateVector[2] == State.order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected;
		case order_part_Rdy_for_order_PaymentGestion_PaymentWaiting:
			return stateVector[3] == State.order_part_Rdy_for_order_PaymentGestion_PaymentWaiting;
		case order_part_Rdy_for_order_PaymentGestion_CheckPayment:
			return stateVector[3] == State.order_part_Rdy_for_order_PaymentGestion_CheckPayment;
		case order_part_Rdy_for_order_PaymentGestion_paimentChecked:
			return stateVector[3] == State.order_part_Rdy_for_order_PaymentGestion_paimentChecked;
		case order_part_Preparation:
			return stateVector[0].ordinal() >= State.
					order_part_Preparation.ordinal()&& stateVector[0].ordinal() <= State.order_part_Preparation_DrinkMaking_Milk.ordinal();
		case order_part_Preparation_DrinkMaking_Initialization:
			return stateVector[0] == State.order_part_Preparation_DrinkMaking_Initialization;
		case order_part_Preparation_DrinkMaking_Step2:
			return stateVector[0].ordinal() >= State.
					order_part_Preparation_DrinkMaking_Step2.ordinal()&& stateVector[0].ordinal() <= State.order_part_Preparation_DrinkMaking_Step2_r3_GrainTamping.ordinal();
		case order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperatureDone:
			return stateVector[0] == State.order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperatureDone;
		case order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperature:
			return stateVector[0] == State.order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperature;
		case order_part_Preparation_DrinkMaking_Step2_r2_CupPositionningDone:
			return stateVector[1] == State.order_part_Preparation_DrinkMaking_Step2_r2_CupPositionningDone;
		case order_part_Preparation_DrinkMaking_Step2_r2_CupPositionning:
			return stateVector[1] == State.order_part_Preparation_DrinkMaking_Step2_r2_CupPositionning;
		case order_part_Preparation_DrinkMaking_Step2_r3_GrainTampingDone:
			return stateVector[2] == State.order_part_Preparation_DrinkMaking_Step2_r3_GrainTampingDone;
		case order_part_Preparation_DrinkMaking_Step2_r3_GrainTamping:
			return stateVector[2] == State.order_part_Preparation_DrinkMaking_Step2_r3_GrainTamping;
		case order_part_Preparation_DrinkMaking_Step3:
			return stateVector[0].ordinal() >= State.
					order_part_Preparation_DrinkMaking_Step3.ordinal()&& stateVector[0].ordinal() <= State.order_part_Preparation_DrinkMaking_Step3_Option_croutonsDone.ordinal();
		case order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrink:
			return stateVector[0] == State.order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrink;
		case order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrinkDone:
			return stateVector[0] == State.order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrinkDone;
		case order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSize:
			return stateVector[1] == State.order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSize;
		case order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSizeDone:
			return stateVector[1] == State.order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSizeDone;
		case order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTime:
			return stateVector[2] == State.order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTime;
		case order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTimeDone:
			return stateVector[2] == State.order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTimeDone;
		case order_part_Preparation_DrinkMaking_Step3_Option_croutons:
			return stateVector[3] == State.order_part_Preparation_DrinkMaking_Step3_Option_croutons;
		case order_part_Preparation_DrinkMaking_Step3_Option_croutonsDone:
			return stateVector[3] == State.order_part_Preparation_DrinkMaking_Step3_Option_croutonsDone;
		case order_part_Preparation_DrinkMaking_Step1:
			return stateVector[0].ordinal() >= State.
					order_part_Preparation_DrinkMaking_Step1.ordinal()&& stateVector[0].ordinal() <= State.order_part_Preparation_DrinkMaking_Step1_r4_GrainMashingDone.ordinal();
		case order_part_Preparation_DrinkMaking_Step1_r1_PodPositionningDone:
			return stateVector[0] == State.order_part_Preparation_DrinkMaking_Step1_r1_PodPositionningDone;
		case order_part_Preparation_DrinkMaking_Step1_r1_PodPositionning:
			return stateVector[0] == State.order_part_Preparation_DrinkMaking_Step1_r1_PodPositionning;
		case order_part_Preparation_DrinkMaking_Step1_r2_WaterHeatingDone:
			return stateVector[1] == State.order_part_Preparation_DrinkMaking_Step1_r2_WaterHeatingDone;
		case order_part_Preparation_DrinkMaking_Step1_r2_WaterHeating:
			return stateVector[1] == State.order_part_Preparation_DrinkMaking_Step1_r2_WaterHeating;
		case order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionningDone:
			return stateVector[2] == State.order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionningDone;
		case order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionning:
			return stateVector[2] == State.order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionning;
		case order_part_Preparation_DrinkMaking_Step1_r4_GrainMashing:
			return stateVector[3] == State.order_part_Preparation_DrinkMaking_Step1_r4_GrainMashing;
		case order_part_Preparation_DrinkMaking_Step1_r4_GrainMashingDone:
			return stateVector[3] == State.order_part_Preparation_DrinkMaking_Step1_r4_GrainMashingDone;
		case order_part_Preparation_DrinkMaking_Step4:
			return stateVector[0].ordinal() >= State.
					order_part_Preparation_DrinkMaking_Step4.ordinal()&& stateVector[0].ordinal() <= State.order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusionDone.ordinal();
		case order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusion:
			return stateVector[0] == State.order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusion;
		case order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusionDone:
			return stateVector[0] == State.order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusionDone;
		case order_part_Preparation_DrinkMaking_Step5:
			return stateVector[0].ordinal() >= State.
					order_part_Preparation_DrinkMaking_Step5.ordinal()&& stateVector[0].ordinal() <= State.order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawalDone.ordinal();
		case order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawal:
			return stateVector[0] == State.order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawal;
		case order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawalDone:
			return stateVector[0] == State.order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawalDone;
		case order_part_Preparation_DrinkMaking_IceCream:
			return stateVector[0] == State.order_part_Preparation_DrinkMaking_IceCream;
		case order_part_Preparation_DrinkMaking_Milk:
			return stateVector[0] == State.order_part_Preparation_DrinkMaking_Milk;
		case order_part_waitingForRecuperation:
			return stateVector[0] == State.order_part_waitingForRecuperation;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public synchronized void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public synchronized void timeElapsed(int eventID) {
		timeEvents[eventID] = true;
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public synchronized void raiseOrderDelivered() {
		sCInterface.raiseOrderDelivered();
	}
	
	public synchronized void raiseSliderModified() {
		sCInterface.raiseSliderModified();
	}
	
	public synchronized void raiseRemoveCup() {
		sCInterface.raiseRemoveCup();
	}
	
	public synchronized void raiseDrinkSelectionDone() {
		sCInterface.raiseDrinkSelectionDone();
	}
	
	public synchronized void raiseOptionSelection() {
		sCInterface.raiseOptionSelection();
	}
	
	public synchronized void raiseAddCoin() {
		sCInterface.raiseAddCoin();
	}
	
	public synchronized void raiseNotEnough() {
		sCInterface.raiseNotEnough();
	}
	
	public synchronized void raiseCancel() {
		sCInterface.raiseCancel();
	}
	
	public synchronized void raiseNFC() {
		sCInterface.raiseNFC();
	}
	
	public synchronized boolean isRaisedDoPrepareForNextOrder() {
		return sCInterface.isRaisedDoPrepareForNextOrder();
	}
	
	public synchronized boolean isRaisedDoResetOperation() {
		return sCInterface.isRaisedDoResetOperation();
	}
	
	public synchronized boolean isRaisedDoResetDrinkSelected() {
		return sCInterface.isRaisedDoResetDrinkSelected();
	}
	
	public synchronized boolean isRaisedDoResetPayment() {
		return sCInterface.isRaisedDoResetPayment();
	}
	
	public synchronized boolean isRaisedDoCheckPayment() {
		return sCInterface.isRaisedDoCheckPayment();
	}
	
	public synchronized boolean isRaisedDoResetSliders() {
		return sCInterface.isRaisedDoResetSliders();
	}
	
	public synchronized boolean isRaisedDoWaitForRecuperation() {
		return sCInterface.isRaisedDoWaitForRecuperation();
	}
	
	public synchronized boolean isRaisedNoActionFor45sec() {
		return sCInterface.isRaisedNoActionFor45sec();
	}
	
	public synchronized boolean isRaisedDoNextPreparationStep() {
		return sCInterface.isRaisedDoNextPreparationStep();
	}
	
	public synchronized boolean isRaisedDoPrintNextStep() {
		return sCInterface.isRaisedDoPrintNextStep();
	}
	
	public synchronized boolean getOkForExpressoStep1() {
		return sCInterface.getOkForExpressoStep1();
	}
	
	public synchronized void setOkForExpressoStep1(boolean value) {
		sCInterface.setOkForExpressoStep1(value);
	}
	
	public synchronized boolean getOkForExpressoStep2() {
		return sCInterface.getOkForExpressoStep2();
	}
	
	public synchronized void setOkForExpressoStep2(boolean value) {
		sCInterface.setOkForExpressoStep2(value);
	}
	
	public synchronized boolean getOkForExpressoStep3() {
		return sCInterface.getOkForExpressoStep3();
	}
	
	public synchronized void setOkForExpressoStep3(boolean value) {
		sCInterface.setOkForExpressoStep3(value);
	}
	
	public synchronized boolean getOkForTeaStep1() {
		return sCInterface.getOkForTeaStep1();
	}
	
	public synchronized void setOkForTeaStep1(boolean value) {
		sCInterface.setOkForTeaStep1(value);
	}
	
	public synchronized boolean getOkForTeaStep2() {
		return sCInterface.getOkForTeaStep2();
	}
	
	public synchronized void setOkForTeaStep2(boolean value) {
		sCInterface.setOkForTeaStep2(value);
	}
	
	public synchronized boolean getOkForTeaStep3() {
		return sCInterface.getOkForTeaStep3();
	}
	
	public synchronized void setOkForTeaStep3(boolean value) {
		sCInterface.setOkForTeaStep3(value);
	}
	
	public synchronized boolean getOkForTeaStep4() {
		return sCInterface.getOkForTeaStep4();
	}
	
	public synchronized void setOkForTeaStep4(boolean value) {
		sCInterface.setOkForTeaStep4(value);
	}
	
	public synchronized boolean getOkForTeaStep5() {
		return sCInterface.getOkForTeaStep5();
	}
	
	public synchronized void setOkForTeaStep5(boolean value) {
		sCInterface.setOkForTeaStep5(value);
	}
	
	public synchronized boolean getOkForSoupeStep3() {
		return sCInterface.getOkForSoupeStep3();
	}
	
	public synchronized void setOkForSoupeStep3(boolean value) {
		sCInterface.setOkForSoupeStep3(value);
	}
	
	public synchronized boolean getOkForCoffeeStep1() {
		return sCInterface.getOkForCoffeeStep1();
	}
	
	public synchronized void setOkForCoffeeStep1(boolean value) {
		sCInterface.setOkForCoffeeStep1(value);
	}
	
	public synchronized boolean getOkForCoffeeStep2() {
		return sCInterface.getOkForCoffeeStep2();
	}
	
	public synchronized void setOkForCoffeeStep2(boolean value) {
		sCInterface.setOkForCoffeeStep2(value);
	}
	
	public synchronized boolean getOkForCoffeeStep3() {
		return sCInterface.getOkForCoffeeStep3();
	}
	
	public synchronized void setOkForCoffeeStep3(boolean value) {
		sCInterface.setOkForCoffeeStep3(value);
	}
	
	public synchronized boolean getOkForSoupStep1() {
		return sCInterface.getOkForSoupStep1();
	}
	
	public synchronized void setOkForSoupStep1(boolean value) {
		sCInterface.setOkForSoupStep1(value);
	}
	
	public synchronized boolean getOkForSoupStep2() {
		return sCInterface.getOkForSoupStep2();
	}
	
	public synchronized void setOkForSoupStep2(boolean value) {
		sCInterface.setOkForSoupStep2(value);
	}
	
	public synchronized boolean getOkForSoupStep3() {
		return sCInterface.getOkForSoupStep3();
	}
	
	public synchronized void setOkForSoupStep3(boolean value) {
		sCInterface.setOkForSoupStep3(value);
	}
	
	public synchronized boolean getReadyToDeliver() {
		return sCInterface.getReadyToDeliver();
	}
	
	public synchronized void setReadyToDeliver(boolean value) {
		sCInterface.setReadyToDeliver(value);
	}
	
	public synchronized long getWftTime() {
		return sCInterface.getWftTime();
	}
	
	public synchronized void setWftTime(long value) {
		sCInterface.setWftTime(value);
	}
	
	public synchronized long getCpTime() {
		return sCInterface.getCpTime();
	}
	
	public synchronized void setCpTime(long value) {
		sCInterface.setCpTime(value);
	}
	
	public synchronized long getStdTime() {
		return sCInterface.getStdTime();
	}
	
	public synchronized void setStdTime(long value) {
		sCInterface.setStdTime(value);
	}
	
	public synchronized long getPwfsTime() {
		return sCInterface.getPwfsTime();
	}
	
	public synchronized void setPwfsTime(long value) {
		sCInterface.setPwfsTime(value);
	}
	
	public synchronized long getPwftTime() {
		return sCInterface.getPwftTime();
	}
	
	public synchronized void setPwftTime(long value) {
		sCInterface.setPwftTime(value);
	}
	
	public synchronized long getPpTime() {
		return sCInterface.getPpTime();
	}
	
	public synchronized void setPpTime(long value) {
		sCInterface.setPpTime(value);
	}
	
	public synchronized long getWhTime() {
		return sCInterface.getWhTime();
	}
	
	public synchronized void setWhTime(long value) {
		sCInterface.setWhTime(value);
	}
	
	public synchronized long getGmTime() {
		return sCInterface.getGmTime();
	}
	
	public synchronized void setGmTime(long value) {
		sCInterface.setGmTime(value);
	}
	
	public synchronized long getSpTime() {
		return sCInterface.getSpTime();
	}
	
	public synchronized void setSpTime(long value) {
		sCInterface.setSpTime(value);
	}
	
	public synchronized long getGtTime() {
		return sCInterface.getGtTime();
	}
	
	public synchronized void setGtTime(long value) {
		sCInterface.setGtTime(value);
	}
	
	public synchronized long getWfiTime() {
		return sCInterface.getWfiTime();
	}
	
	public synchronized void setWfiTime(long value) {
		sCInterface.setWfiTime(value);
	}
	
	public synchronized long getSwdTime() {
		return sCInterface.getSwdTime();
	}
	
	public synchronized void setSwdTime(long value) {
		sCInterface.setSwdTime(value);
	}
	
	public synchronized long getIcTime() {
		return sCInterface.getIcTime();
	}
	
	public synchronized void setIcTime(long value) {
		sCInterface.setIcTime(value);
	}
	
	public synchronized long getMTime() {
		return sCInterface.getMTime();
	}
	
	public synchronized void setMTime(long value) {
		sCInterface.setMTime(value);
	}
	
	public synchronized boolean getPaymentChecked() {
		return sCInterface.getPaymentChecked();
	}
	
	public synchronized void setPaymentChecked(boolean value) {
		sCInterface.setPaymentChecked(value);
	}
	
	public synchronized boolean getMilk() {
		return sCInterface.getMilk();
	}
	
	public synchronized void setMilk(boolean value) {
		sCInterface.setMilk(value);
	}
	
	public synchronized boolean getIceCream() {
		return sCInterface.getIceCream();
	}
	
	public synchronized void setIceCream(boolean value) {
		sCInterface.setIceCream(value);
	}
	
	private boolean check_Order_part_Preparation_DrinkMaking__choice_0_tr0_tr0() {
		return sCInterface.getIceCream();
	}
	
	private boolean check_Order_part_Preparation_DrinkMaking__choice_0_tr1_tr1() {
		return (sCInterface.getMilk() && !sCInterface.getIceCream());
	}
	
	private void effect_Order_part_Preparation_tr0() {
		exitSequence_Order_part_Preparation();
		enterSequence_Order_part_waitingForRecuperation_default();
		react();
	}
	
	private void effect_Order_part_Preparation_DrinkMaking__choice_0_tr0() {
		enterSequence_Order_part_Preparation_DrinkMaking_IceCream_default();
	}
	
	private void effect_Order_part_Preparation_DrinkMaking__choice_0_tr1() {
		enterSequence_Order_part_Preparation_DrinkMaking_Milk_default();
	}
	
	private void effect_Order_part_Preparation_DrinkMaking__choice_0_tr2() {
		react_Order_part_Preparation_DrinkMaking__exit_Default();
	}
	
	/* Entry action for state 'ActionDetected'. */
	private void entryAction_Order_part_Rdy_for_order_NoActionDetection_ActionDetected() {
		timer.setTimer(this, 0, 10000, false);
	}
	
	/* Entry action for state 'DrinkSelected'. */
	private void entryAction_Order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected() {
		sCInterface.raiseDoCheckPayment();
	}
	
	/* Entry action for state 'CheckPayment'. */
	private void entryAction_Order_part_Rdy_for_order_PaymentGestion_CheckPayment() {
		timer.setTimer(this, 1, 200, true);
		
		sCInterface.raiseDoCheckPayment();
	}
	
	/* Entry action for state 'paimentChecked'. */
	private void entryAction_Order_part_Rdy_for_order_PaymentGestion_paimentChecked() {
		timer.setTimer(this, 2, (2 * 1000), false);
	}
	
	/* Entry action for state 'Initialization'. */
	private void entryAction_Order_part_Preparation_DrinkMaking_Initialization() {
		timer.setTimer(this, 3, 200, true);
		
		timer.setTimer(this, 4, 200, true);
		
		timer.setTimer(this, 5, 200, true);
		
		sCInterface.raiseDoNextPreparationStep();
	}
	
	/* Entry action for state 'WaitingForTemperatureDone'. */
	private void entryAction_Order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperatureDone() {
		sCInterface.raiseDoNextPreparationStep();
	}
	
	/* Entry action for state 'WaitingForTemperature'. */
	private void entryAction_Order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperature() {
		timer.setTimer(this, 6, sCInterface.getWftTime(), false);
		
		sCInterface.raiseDoPrintNextStep();
	}
	
	/* Entry action for state 'CupPositionning'. */
	private void entryAction_Order_part_Preparation_DrinkMaking_Step2_r2_CupPositionning() {
		timer.setTimer(this, 7, sCInterface.getCpTime(), false);
	}
	
	/* Entry action for state 'GrainTamping'. */
	private void entryAction_Order_part_Preparation_DrinkMaking_Step2_r3_GrainTamping() {
		timer.setTimer(this, 8, sCInterface.getGtTime(), false);
	}
	
	/* Entry action for state 'SugarTheDrink'. */
	private void entryAction_Order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrink() {
		timer.setTimer(this, 9, sCInterface.getStdTime(), false);
		
		sCInterface.raiseDoPrintNextStep();
	}
	
	/* Entry action for state 'SugarTheDrinkDone'. */
	private void entryAction_Order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrinkDone() {
		sCInterface.raiseDoNextPreparationStep();
	}
	
	/* Entry action for state 'PooringWaterForSize'. */
	private void entryAction_Order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSize() {
		timer.setTimer(this, 10, sCInterface.getPwfsTime(), false);
	}
	
	/* Entry action for state 'PooringWaterForTime'. */
	private void entryAction_Order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTime() {
		timer.setTimer(this, 11, sCInterface.getPwftTime(), false);
	}
	
	/* Entry action for state 'croutons'. */
	private void entryAction_Order_part_Preparation_DrinkMaking_Step3_Option_croutons() {
		timer.setTimer(this, 12, (3 * 1000), false);
	}
	
	/* Entry action for state 'PodPositionningDone'. */
	private void entryAction_Order_part_Preparation_DrinkMaking_Step1_r1_PodPositionningDone() {
		sCInterface.raiseDoNextPreparationStep();
	}
	
	/* Entry action for state 'PodPositionning'. */
	private void entryAction_Order_part_Preparation_DrinkMaking_Step1_r1_PodPositionning() {
		timer.setTimer(this, 13, sCInterface.getPpTime(), false);
		
		sCInterface.raiseDoPrintNextStep();
	}
	
	/* Entry action for state 'WaterHeating'. */
	private void entryAction_Order_part_Preparation_DrinkMaking_Step1_r2_WaterHeating() {
		timer.setTimer(this, 14, sCInterface.getWhTime(), false);
	}
	
	/* Entry action for state 'SachetPositionningDone'. */
	private void entryAction_Order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionningDone() {
		sCInterface.raiseDoNextPreparationStep();
	}
	
	/* Entry action for state 'SachetPositionning'. */
	private void entryAction_Order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionning() {
		timer.setTimer(this, 15, sCInterface.getSpTime(), false);
	}
	
	/* Entry action for state 'GrainMashing'. */
	private void entryAction_Order_part_Preparation_DrinkMaking_Step1_r4_GrainMashing() {
		timer.setTimer(this, 16, sCInterface.getGmTime(), false);
	}
	
	/* Entry action for state 'GrainMashingDone'. */
	private void entryAction_Order_part_Preparation_DrinkMaking_Step1_r4_GrainMashingDone() {
		sCInterface.raiseDoNextPreparationStep();
	}
	
	/* Entry action for state 'WaitingForInfusion'. */
	private void entryAction_Order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusion() {
		timer.setTimer(this, 17, sCInterface.getWfiTime(), false);
		
		sCInterface.raiseDoPrintNextStep();
	}
	
	/* Entry action for state 'WaitingForInfusionDone'. */
	private void entryAction_Order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusionDone() {
		sCInterface.raiseDoNextPreparationStep();
	}
	
	/* Entry action for state 'SachetWithdrawal'. */
	private void entryAction_Order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawal() {
		timer.setTimer(this, 18, sCInterface.getSwdTime(), false);
		
		sCInterface.raiseDoPrintNextStep();
	}
	
	/* Entry action for state 'SachetWithdrawalDone'. */
	private void entryAction_Order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawalDone() {
		sCInterface.raiseDoNextPreparationStep();
	}
	
	/* Entry action for state 'IceCream'. */
	private void entryAction_Order_part_Preparation_DrinkMaking_IceCream() {
		timer.setTimer(this, 19, sCInterface.getIcTime(), false);
		
		timer.setTimer(this, 20, sCInterface.getIcTime(), false);
	}
	
	/* Entry action for state 'Milk'. */
	private void entryAction_Order_part_Preparation_DrinkMaking_Milk() {
		timer.setTimer(this, 21, sCInterface.getMTime(), false);
	}
	
	/* Entry action for state 'waitingForRecuperation'. */
	private void entryAction_Order_part_waitingForRecuperation() {
		sCInterface.raiseDoWaitForRecuperation();
	}
	
	/* Exit action for state 'ActionDetected'. */
	private void exitAction_Order_part_Rdy_for_order_NoActionDetection_ActionDetected() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'CheckPayment'. */
	private void exitAction_Order_part_Rdy_for_order_PaymentGestion_CheckPayment() {
		timer.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'paimentChecked'. */
	private void exitAction_Order_part_Rdy_for_order_PaymentGestion_paimentChecked() {
		timer.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'Initialization'. */
	private void exitAction_Order_part_Preparation_DrinkMaking_Initialization() {
		timer.unsetTimer(this, 3);
		
		timer.unsetTimer(this, 4);
		
		timer.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'WaitingForTemperature'. */
	private void exitAction_Order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperature() {
		timer.unsetTimer(this, 6);
	}
	
	/* Exit action for state 'CupPositionning'. */
	private void exitAction_Order_part_Preparation_DrinkMaking_Step2_r2_CupPositionning() {
		timer.unsetTimer(this, 7);
	}
	
	/* Exit action for state 'GrainTamping'. */
	private void exitAction_Order_part_Preparation_DrinkMaking_Step2_r3_GrainTamping() {
		timer.unsetTimer(this, 8);
	}
	
	/* Exit action for state 'SugarTheDrink'. */
	private void exitAction_Order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrink() {
		timer.unsetTimer(this, 9);
	}
	
	/* Exit action for state 'PooringWaterForSize'. */
	private void exitAction_Order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSize() {
		timer.unsetTimer(this, 10);
	}
	
	/* Exit action for state 'PooringWaterForTime'. */
	private void exitAction_Order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTime() {
		timer.unsetTimer(this, 11);
	}
	
	/* Exit action for state 'croutons'. */
	private void exitAction_Order_part_Preparation_DrinkMaking_Step3_Option_croutons() {
		timer.unsetTimer(this, 12);
	}
	
	/* Exit action for state 'PodPositionning'. */
	private void exitAction_Order_part_Preparation_DrinkMaking_Step1_r1_PodPositionning() {
		timer.unsetTimer(this, 13);
	}
	
	/* Exit action for state 'WaterHeating'. */
	private void exitAction_Order_part_Preparation_DrinkMaking_Step1_r2_WaterHeating() {
		timer.unsetTimer(this, 14);
	}
	
	/* Exit action for state 'SachetPositionning'. */
	private void exitAction_Order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionning() {
		timer.unsetTimer(this, 15);
	}
	
	/* Exit action for state 'GrainMashing'. */
	private void exitAction_Order_part_Preparation_DrinkMaking_Step1_r4_GrainMashing() {
		timer.unsetTimer(this, 16);
	}
	
	/* Exit action for state 'WaitingForInfusion'. */
	private void exitAction_Order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusion() {
		timer.unsetTimer(this, 17);
	}
	
	/* Exit action for state 'SachetWithdrawal'. */
	private void exitAction_Order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawal() {
		timer.unsetTimer(this, 18);
	}
	
	/* Exit action for state 'IceCream'. */
	private void exitAction_Order_part_Preparation_DrinkMaking_IceCream() {
		timer.unsetTimer(this, 19);
		
		timer.unsetTimer(this, 20);
	}
	
	/* Exit action for state 'Milk'. */
	private void exitAction_Order_part_Preparation_DrinkMaking_Milk() {
		timer.unsetTimer(this, 21);
	}
	
	/* 'default' enter sequence for state Rdy for order */
	private void enterSequence_Order_part_Rdy_for_order_default() {
		enterSequence_Order_part_Rdy_for_order_NoActionDetection_default();
		enterSequence_Order_part_Rdy_for_order_ss_default();
		enterSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_default();
		enterSequence_Order_part_Rdy_for_order_PaymentGestion_default();
	}
	
	/* 'default' enter sequence for state NoActionDetected */
	private void enterSequence_Order_part_Rdy_for_order_NoActionDetection_NoActionDetected_default() {
		nextStateIndex = 0;
		stateVector[0] = State.order_part_Rdy_for_order_NoActionDetection_NoActionDetected;
	}
	
	/* 'default' enter sequence for state ActionDetected */
	private void enterSequence_Order_part_Rdy_for_order_NoActionDetection_ActionDetected_default() {
		entryAction_Order_part_Rdy_for_order_NoActionDetection_ActionDetected();
		nextStateIndex = 0;
		stateVector[0] = State.order_part_Rdy_for_order_NoActionDetection_ActionDetected;
	}
	
	/* 'default' enter sequence for state SlidersDefault */
	private void enterSequence_Order_part_Rdy_for_order_ss_SlidersDefault_default() {
		nextStateIndex = 1;
		stateVector[1] = State.order_part_Rdy_for_order_ss_SlidersDefault;
	}
	
	/* 'default' enter sequence for state SlidersCustomed */
	private void enterSequence_Order_part_Rdy_for_order_ss_SlidersCustomed_default() {
		nextStateIndex = 1;
		stateVector[1] = State.order_part_Rdy_for_order_ss_SlidersCustomed;
	}
	
	/* 'default' enter sequence for state DrinkSelectionWaiting */
	private void enterSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectionWaiting_default() {
		nextStateIndex = 2;
		stateVector[2] = State.order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectionWaiting;
	}
	
	/* 'default' enter sequence for state DrinkSelected */
	private void enterSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected_default() {
		entryAction_Order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected();
		nextStateIndex = 2;
		stateVector[2] = State.order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected;
	}
	
	/* 'default' enter sequence for state PaymentWaiting */
	private void enterSequence_Order_part_Rdy_for_order_PaymentGestion_PaymentWaiting_default() {
		nextStateIndex = 3;
		stateVector[3] = State.order_part_Rdy_for_order_PaymentGestion_PaymentWaiting;
	}
	
	/* 'default' enter sequence for state CheckPayment */
	private void enterSequence_Order_part_Rdy_for_order_PaymentGestion_CheckPayment_default() {
		entryAction_Order_part_Rdy_for_order_PaymentGestion_CheckPayment();
		nextStateIndex = 3;
		stateVector[3] = State.order_part_Rdy_for_order_PaymentGestion_CheckPayment;
	}
	
	/* 'default' enter sequence for state paimentChecked */
	private void enterSequence_Order_part_Rdy_for_order_PaymentGestion_paimentChecked_default() {
		entryAction_Order_part_Rdy_for_order_PaymentGestion_paimentChecked();
		nextStateIndex = 3;
		stateVector[3] = State.order_part_Rdy_for_order_PaymentGestion_paimentChecked;
	}
	
	/* 'default' enter sequence for state Preparation */
	private void enterSequence_Order_part_Preparation_default() {
		enterSequence_Order_part_Preparation_DrinkMaking_default();
	}
	
	/* 'default' enter sequence for state Initialization */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Initialization_default() {
		entryAction_Order_part_Preparation_DrinkMaking_Initialization();
		nextStateIndex = 0;
		stateVector[0] = State.order_part_Preparation_DrinkMaking_Initialization;
	}
	
	/* 'default' enter sequence for state Step2 */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step2_default() {
		enterSequence_Order_part_Preparation_DrinkMaking_Step2_r1_default();
		enterSequence_Order_part_Preparation_DrinkMaking_Step2_r2_default();
		enterSequence_Order_part_Preparation_DrinkMaking_Step2_r3_default();
	}
	
	/* 'default' enter sequence for state WaitingForTemperatureDone */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperatureDone_default() {
		entryAction_Order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperatureDone();
		nextStateIndex = 0;
		stateVector[0] = State.order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperatureDone;
	}
	
	/* 'default' enter sequence for state WaitingForTemperature */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperature_default() {
		entryAction_Order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperature();
		nextStateIndex = 0;
		stateVector[0] = State.order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperature;
	}
	
	/* 'default' enter sequence for state CupPositionningDone */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step2_r2_CupPositionningDone_default() {
		nextStateIndex = 1;
		stateVector[1] = State.order_part_Preparation_DrinkMaking_Step2_r2_CupPositionningDone;
	}
	
	/* 'default' enter sequence for state CupPositionning */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step2_r2_CupPositionning_default() {
		entryAction_Order_part_Preparation_DrinkMaking_Step2_r2_CupPositionning();
		nextStateIndex = 1;
		stateVector[1] = State.order_part_Preparation_DrinkMaking_Step2_r2_CupPositionning;
	}
	
	/* 'default' enter sequence for state GrainTampingDone */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step2_r3_GrainTampingDone_default() {
		nextStateIndex = 2;
		stateVector[2] = State.order_part_Preparation_DrinkMaking_Step2_r3_GrainTampingDone;
	}
	
	/* 'default' enter sequence for state GrainTamping */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step2_r3_GrainTamping_default() {
		entryAction_Order_part_Preparation_DrinkMaking_Step2_r3_GrainTamping();
		nextStateIndex = 2;
		stateVector[2] = State.order_part_Preparation_DrinkMaking_Step2_r3_GrainTamping;
	}
	
	/* 'default' enter sequence for state Step3 */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step3_default() {
		enterSequence_Order_part_Preparation_DrinkMaking_Step3_r1_default();
		enterSequence_Order_part_Preparation_DrinkMaking_Step3_r2_default();
		enterSequence_Order_part_Preparation_DrinkMaking_Step3_r3_default();
		enterSequence_Order_part_Preparation_DrinkMaking_Step3_Option_default();
	}
	
	/* 'default' enter sequence for state SugarTheDrink */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrink_default() {
		entryAction_Order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrink();
		nextStateIndex = 0;
		stateVector[0] = State.order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrink;
	}
	
	/* 'default' enter sequence for state SugarTheDrinkDone */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrinkDone_default() {
		entryAction_Order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrinkDone();
		nextStateIndex = 0;
		stateVector[0] = State.order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrinkDone;
	}
	
	/* 'default' enter sequence for state PooringWaterForSize */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSize_default() {
		entryAction_Order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSize();
		nextStateIndex = 1;
		stateVector[1] = State.order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSize;
	}
	
	/* 'default' enter sequence for state PooringWaterForSizeDone */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSizeDone_default() {
		nextStateIndex = 1;
		stateVector[1] = State.order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSizeDone;
	}
	
	/* 'default' enter sequence for state PooringWaterForTime */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTime_default() {
		entryAction_Order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTime();
		nextStateIndex = 2;
		stateVector[2] = State.order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTime;
	}
	
	/* 'default' enter sequence for state PooringWaterForTimeDone */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTimeDone_default() {
		nextStateIndex = 2;
		stateVector[2] = State.order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTimeDone;
	}
	
	/* 'default' enter sequence for state croutons */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step3_Option_croutons_default() {
		entryAction_Order_part_Preparation_DrinkMaking_Step3_Option_croutons();
		nextStateIndex = 3;
		stateVector[3] = State.order_part_Preparation_DrinkMaking_Step3_Option_croutons;
	}
	
	/* 'default' enter sequence for state croutonsDone */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step3_Option_croutonsDone_default() {
		nextStateIndex = 3;
		stateVector[3] = State.order_part_Preparation_DrinkMaking_Step3_Option_croutonsDone;
	}
	
	/* 'default' enter sequence for state Step1 */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step1_default() {
		enterSequence_Order_part_Preparation_DrinkMaking_Step1_r1_default();
		enterSequence_Order_part_Preparation_DrinkMaking_Step1_r2_default();
		enterSequence_Order_part_Preparation_DrinkMaking_Step1_r3_default();
		enterSequence_Order_part_Preparation_DrinkMaking_Step1_r4_default();
	}
	
	/* 'default' enter sequence for state PodPositionningDone */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step1_r1_PodPositionningDone_default() {
		entryAction_Order_part_Preparation_DrinkMaking_Step1_r1_PodPositionningDone();
		nextStateIndex = 0;
		stateVector[0] = State.order_part_Preparation_DrinkMaking_Step1_r1_PodPositionningDone;
	}
	
	/* 'default' enter sequence for state PodPositionning */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step1_r1_PodPositionning_default() {
		entryAction_Order_part_Preparation_DrinkMaking_Step1_r1_PodPositionning();
		nextStateIndex = 0;
		stateVector[0] = State.order_part_Preparation_DrinkMaking_Step1_r1_PodPositionning;
	}
	
	/* 'default' enter sequence for state WaterHeatingDone */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step1_r2_WaterHeatingDone_default() {
		nextStateIndex = 1;
		stateVector[1] = State.order_part_Preparation_DrinkMaking_Step1_r2_WaterHeatingDone;
	}
	
	/* 'default' enter sequence for state WaterHeating */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step1_r2_WaterHeating_default() {
		entryAction_Order_part_Preparation_DrinkMaking_Step1_r2_WaterHeating();
		nextStateIndex = 1;
		stateVector[1] = State.order_part_Preparation_DrinkMaking_Step1_r2_WaterHeating;
	}
	
	/* 'default' enter sequence for state SachetPositionningDone */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionningDone_default() {
		entryAction_Order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionningDone();
		nextStateIndex = 2;
		stateVector[2] = State.order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionningDone;
	}
	
	/* 'default' enter sequence for state SachetPositionning */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionning_default() {
		entryAction_Order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionning();
		nextStateIndex = 2;
		stateVector[2] = State.order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionning;
	}
	
	/* 'default' enter sequence for state GrainMashing */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step1_r4_GrainMashing_default() {
		entryAction_Order_part_Preparation_DrinkMaking_Step1_r4_GrainMashing();
		nextStateIndex = 3;
		stateVector[3] = State.order_part_Preparation_DrinkMaking_Step1_r4_GrainMashing;
	}
	
	/* 'default' enter sequence for state GrainMashingDone */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step1_r4_GrainMashingDone_default() {
		entryAction_Order_part_Preparation_DrinkMaking_Step1_r4_GrainMashingDone();
		nextStateIndex = 3;
		stateVector[3] = State.order_part_Preparation_DrinkMaking_Step1_r4_GrainMashingDone;
	}
	
	/* 'default' enter sequence for state Step4 */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step4_default() {
		enterSequence_Order_part_Preparation_DrinkMaking_Step4_r1_default();
	}
	
	/* 'default' enter sequence for state WaitingForInfusion */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusion_default() {
		entryAction_Order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusion();
		nextStateIndex = 0;
		stateVector[0] = State.order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusion;
	}
	
	/* 'default' enter sequence for state WaitingForInfusionDone */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusionDone_default() {
		entryAction_Order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusionDone();
		nextStateIndex = 0;
		stateVector[0] = State.order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusionDone;
	}
	
	/* 'default' enter sequence for state Step5 */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step5_default() {
		enterSequence_Order_part_Preparation_DrinkMaking_Step5_r1_default();
	}
	
	/* 'default' enter sequence for state SachetWithdrawal */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawal_default() {
		entryAction_Order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawal();
		nextStateIndex = 0;
		stateVector[0] = State.order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawal;
	}
	
	/* 'default' enter sequence for state SachetWithdrawalDone */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawalDone_default() {
		entryAction_Order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawalDone();
		nextStateIndex = 0;
		stateVector[0] = State.order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawalDone;
	}
	
	/* 'default' enter sequence for state IceCream */
	private void enterSequence_Order_part_Preparation_DrinkMaking_IceCream_default() {
		entryAction_Order_part_Preparation_DrinkMaking_IceCream();
		nextStateIndex = 0;
		stateVector[0] = State.order_part_Preparation_DrinkMaking_IceCream;
	}
	
	/* 'default' enter sequence for state Milk */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Milk_default() {
		entryAction_Order_part_Preparation_DrinkMaking_Milk();
		nextStateIndex = 0;
		stateVector[0] = State.order_part_Preparation_DrinkMaking_Milk;
	}
	
	/* 'default' enter sequence for state waitingForRecuperation */
	private void enterSequence_Order_part_waitingForRecuperation_default() {
		entryAction_Order_part_waitingForRecuperation();
		nextStateIndex = 0;
		stateVector[0] = State.order_part_waitingForRecuperation;
	}
	
	/* 'default' enter sequence for region Order part */
	private void enterSequence_Order_part_default() {
		react_Order_part__entry_Default();
	}
	
	/* 'default' enter sequence for region NoActionDetection */
	private void enterSequence_Order_part_Rdy_for_order_NoActionDetection_default() {
		react_Order_part_Rdy_for_order_NoActionDetection__entry_Default();
	}
	
	/* 'default' enter sequence for region ss */
	private void enterSequence_Order_part_Rdy_for_order_ss_default() {
		react_Order_part_Rdy_for_order_ss__entry_Default();
	}
	
	/* 'default' enter sequence for region DrinkSelectionGestion */
	private void enterSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_default() {
		react_Order_part_Rdy_for_order_DrinkSelectionGestion__entry_Default();
	}
	
	/* 'default' enter sequence for region PaymentGestion */
	private void enterSequence_Order_part_Rdy_for_order_PaymentGestion_default() {
		react_Order_part_Rdy_for_order_PaymentGestion__entry_Default();
	}
	
	/* 'default' enter sequence for region DrinkMaking */
	private void enterSequence_Order_part_Preparation_DrinkMaking_default() {
		react_Order_part_Preparation_DrinkMaking__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step2_r1_default() {
		react_Order_part_Preparation_DrinkMaking_Step2_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step2_r2_default() {
		react_Order_part_Preparation_DrinkMaking_Step2_r2__entry_Default();
	}
	
	/* 'default' enter sequence for region r3 */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step2_r3_default() {
		react_Order_part_Preparation_DrinkMaking_Step2_r3__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step3_r1_default() {
		react_Order_part_Preparation_DrinkMaking_Step3_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step3_r2_default() {
		react_Order_part_Preparation_DrinkMaking_Step3_r2__entry_Default();
	}
	
	/* 'default' enter sequence for region r3 */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step3_r3_default() {
		react_Order_part_Preparation_DrinkMaking_Step3_r3__entry_Default();
	}
	
	/* 'default' enter sequence for region Option */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step3_Option_default() {
		react_Order_part_Preparation_DrinkMaking_Step3_Option__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step1_r1_default() {
		react_Order_part_Preparation_DrinkMaking_Step1_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step1_r2_default() {
		react_Order_part_Preparation_DrinkMaking_Step1_r2__entry_Default();
	}
	
	/* 'default' enter sequence for region r3 */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step1_r3_default() {
		react_Order_part_Preparation_DrinkMaking_Step1_r3__entry_Default();
	}
	
	/* 'default' enter sequence for region r4 */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step1_r4_default() {
		react_Order_part_Preparation_DrinkMaking_Step1_r4__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step4_r1_default() {
		react_Order_part_Preparation_DrinkMaking_Step4_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Step5_r1_default() {
		react_Order_part_Preparation_DrinkMaking_Step5_r1__entry_Default();
	}
	
	/* Default exit sequence for state Rdy for order */
	private void exitSequence_Order_part_Rdy_for_order() {
		exitSequence_Order_part_Rdy_for_order_NoActionDetection();
		exitSequence_Order_part_Rdy_for_order_ss();
		exitSequence_Order_part_Rdy_for_order_DrinkSelectionGestion();
		exitSequence_Order_part_Rdy_for_order_PaymentGestion();
	}
	
	/* Default exit sequence for state NoActionDetected */
	private void exitSequence_Order_part_Rdy_for_order_NoActionDetection_NoActionDetected() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state ActionDetected */
	private void exitSequence_Order_part_Rdy_for_order_NoActionDetection_ActionDetected() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Order_part_Rdy_for_order_NoActionDetection_ActionDetected();
	}
	
	/* Default exit sequence for state SlidersDefault */
	private void exitSequence_Order_part_Rdy_for_order_ss_SlidersDefault() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state SlidersCustomed */
	private void exitSequence_Order_part_Rdy_for_order_ss_SlidersCustomed() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state DrinkSelectionWaiting */
	private void exitSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectionWaiting() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state DrinkSelected */
	private void exitSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state PaymentWaiting */
	private void exitSequence_Order_part_Rdy_for_order_PaymentGestion_PaymentWaiting() {
		nextStateIndex = 3;
		stateVector[3] = State.$NullState$;
	}
	
	/* Default exit sequence for state CheckPayment */
	private void exitSequence_Order_part_Rdy_for_order_PaymentGestion_CheckPayment() {
		nextStateIndex = 3;
		stateVector[3] = State.$NullState$;
		
		exitAction_Order_part_Rdy_for_order_PaymentGestion_CheckPayment();
	}
	
	/* Default exit sequence for state paimentChecked */
	private void exitSequence_Order_part_Rdy_for_order_PaymentGestion_paimentChecked() {
		nextStateIndex = 3;
		stateVector[3] = State.$NullState$;
		
		exitAction_Order_part_Rdy_for_order_PaymentGestion_paimentChecked();
	}
	
	/* Default exit sequence for state Preparation */
	private void exitSequence_Order_part_Preparation() {
		exitSequence_Order_part_Preparation_DrinkMaking();
	}
	
	/* Default exit sequence for state Initialization */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Initialization() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Order_part_Preparation_DrinkMaking_Initialization();
	}
	
	/* Default exit sequence for state Step2 */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step2() {
		exitSequence_Order_part_Preparation_DrinkMaking_Step2_r1();
		exitSequence_Order_part_Preparation_DrinkMaking_Step2_r2();
		exitSequence_Order_part_Preparation_DrinkMaking_Step2_r3();
	}
	
	/* Default exit sequence for state WaitingForTemperatureDone */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperatureDone() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state WaitingForTemperature */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperature() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperature();
	}
	
	/* Default exit sequence for state CupPositionningDone */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step2_r2_CupPositionningDone() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state CupPositionning */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step2_r2_CupPositionning() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_Order_part_Preparation_DrinkMaking_Step2_r2_CupPositionning();
	}
	
	/* Default exit sequence for state GrainTampingDone */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step2_r3_GrainTampingDone() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state GrainTamping */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step2_r3_GrainTamping() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
		
		exitAction_Order_part_Preparation_DrinkMaking_Step2_r3_GrainTamping();
	}
	
	/* Default exit sequence for state Step3 */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step3() {
		exitSequence_Order_part_Preparation_DrinkMaking_Step3_r1();
		exitSequence_Order_part_Preparation_DrinkMaking_Step3_r2();
		exitSequence_Order_part_Preparation_DrinkMaking_Step3_r3();
		exitSequence_Order_part_Preparation_DrinkMaking_Step3_Option();
	}
	
	/* Default exit sequence for state SugarTheDrink */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrink() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrink();
	}
	
	/* Default exit sequence for state SugarTheDrinkDone */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrinkDone() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state PooringWaterForSize */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSize() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_Order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSize();
	}
	
	/* Default exit sequence for state PooringWaterForSizeDone */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSizeDone() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state PooringWaterForTime */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTime() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
		
		exitAction_Order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTime();
	}
	
	/* Default exit sequence for state PooringWaterForTimeDone */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTimeDone() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state croutons */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step3_Option_croutons() {
		nextStateIndex = 3;
		stateVector[3] = State.$NullState$;
		
		exitAction_Order_part_Preparation_DrinkMaking_Step3_Option_croutons();
	}
	
	/* Default exit sequence for state croutonsDone */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step3_Option_croutonsDone() {
		nextStateIndex = 3;
		stateVector[3] = State.$NullState$;
	}
	
	/* Default exit sequence for state Step1 */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step1() {
		exitSequence_Order_part_Preparation_DrinkMaking_Step1_r1();
		exitSequence_Order_part_Preparation_DrinkMaking_Step1_r2();
		exitSequence_Order_part_Preparation_DrinkMaking_Step1_r3();
		exitSequence_Order_part_Preparation_DrinkMaking_Step1_r4();
	}
	
	/* Default exit sequence for state PodPositionningDone */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step1_r1_PodPositionningDone() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state PodPositionning */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step1_r1_PodPositionning() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Order_part_Preparation_DrinkMaking_Step1_r1_PodPositionning();
	}
	
	/* Default exit sequence for state WaterHeatingDone */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step1_r2_WaterHeatingDone() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state WaterHeating */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step1_r2_WaterHeating() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_Order_part_Preparation_DrinkMaking_Step1_r2_WaterHeating();
	}
	
	/* Default exit sequence for state SachetPositionningDone */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionningDone() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state SachetPositionning */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionning() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
		
		exitAction_Order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionning();
	}
	
	/* Default exit sequence for state GrainMashing */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step1_r4_GrainMashing() {
		nextStateIndex = 3;
		stateVector[3] = State.$NullState$;
		
		exitAction_Order_part_Preparation_DrinkMaking_Step1_r4_GrainMashing();
	}
	
	/* Default exit sequence for state GrainMashingDone */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step1_r4_GrainMashingDone() {
		nextStateIndex = 3;
		stateVector[3] = State.$NullState$;
	}
	
	/* Default exit sequence for state Step4 */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step4() {
		exitSequence_Order_part_Preparation_DrinkMaking_Step4_r1();
	}
	
	/* Default exit sequence for state WaitingForInfusion */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusion() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusion();
	}
	
	/* Default exit sequence for state WaitingForInfusionDone */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusionDone() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Step5 */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step5() {
		exitSequence_Order_part_Preparation_DrinkMaking_Step5_r1();
	}
	
	/* Default exit sequence for state SachetWithdrawal */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawal() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawal();
	}
	
	/* Default exit sequence for state SachetWithdrawalDone */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawalDone() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state IceCream */
	private void exitSequence_Order_part_Preparation_DrinkMaking_IceCream() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Order_part_Preparation_DrinkMaking_IceCream();
	}
	
	/* Default exit sequence for state Milk */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Milk() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Order_part_Preparation_DrinkMaking_Milk();
	}
	
	/* Default exit sequence for state waitingForRecuperation */
	private void exitSequence_Order_part_waitingForRecuperation() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region Order part */
	private void exitSequence_Order_part() {
		switch (stateVector[0]) {
		case order_part_Rdy_for_order_NoActionDetection_NoActionDetected:
			exitSequence_Order_part_Rdy_for_order_NoActionDetection_NoActionDetected();
			break;
		case order_part_Rdy_for_order_NoActionDetection_ActionDetected:
			exitSequence_Order_part_Rdy_for_order_NoActionDetection_ActionDetected();
			break;
		case order_part_Preparation_DrinkMaking_Initialization:
			exitSequence_Order_part_Preparation_DrinkMaking_Initialization();
			break;
		case order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperatureDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperatureDone();
			break;
		case order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperature:
			exitSequence_Order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperature();
			break;
		case order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrink:
			exitSequence_Order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrink();
			break;
		case order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrinkDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrinkDone();
			break;
		case order_part_Preparation_DrinkMaking_Step1_r1_PodPositionningDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step1_r1_PodPositionningDone();
			break;
		case order_part_Preparation_DrinkMaking_Step1_r1_PodPositionning:
			exitSequence_Order_part_Preparation_DrinkMaking_Step1_r1_PodPositionning();
			break;
		case order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusion:
			exitSequence_Order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusion();
			break;
		case order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusionDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusionDone();
			break;
		case order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawal:
			exitSequence_Order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawal();
			break;
		case order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawalDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawalDone();
			break;
		case order_part_Preparation_DrinkMaking_IceCream:
			exitSequence_Order_part_Preparation_DrinkMaking_IceCream();
			break;
		case order_part_Preparation_DrinkMaking_Milk:
			exitSequence_Order_part_Preparation_DrinkMaking_Milk();
			break;
		case order_part_waitingForRecuperation:
			exitSequence_Order_part_waitingForRecuperation();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case order_part_Rdy_for_order_ss_SlidersDefault:
			exitSequence_Order_part_Rdy_for_order_ss_SlidersDefault();
			break;
		case order_part_Rdy_for_order_ss_SlidersCustomed:
			exitSequence_Order_part_Rdy_for_order_ss_SlidersCustomed();
			break;
		case order_part_Preparation_DrinkMaking_Step2_r2_CupPositionningDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step2_r2_CupPositionningDone();
			break;
		case order_part_Preparation_DrinkMaking_Step2_r2_CupPositionning:
			exitSequence_Order_part_Preparation_DrinkMaking_Step2_r2_CupPositionning();
			break;
		case order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSize:
			exitSequence_Order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSize();
			break;
		case order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSizeDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSizeDone();
			break;
		case order_part_Preparation_DrinkMaking_Step1_r2_WaterHeatingDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step1_r2_WaterHeatingDone();
			break;
		case order_part_Preparation_DrinkMaking_Step1_r2_WaterHeating:
			exitSequence_Order_part_Preparation_DrinkMaking_Step1_r2_WaterHeating();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectionWaiting:
			exitSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectionWaiting();
			break;
		case order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected:
			exitSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected();
			break;
		case order_part_Preparation_DrinkMaking_Step2_r3_GrainTampingDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step2_r3_GrainTampingDone();
			break;
		case order_part_Preparation_DrinkMaking_Step2_r3_GrainTamping:
			exitSequence_Order_part_Preparation_DrinkMaking_Step2_r3_GrainTamping();
			break;
		case order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTime:
			exitSequence_Order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTime();
			break;
		case order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTimeDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTimeDone();
			break;
		case order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionningDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionningDone();
			break;
		case order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionning:
			exitSequence_Order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionning();
			break;
		default:
			break;
		}
		
		switch (stateVector[3]) {
		case order_part_Rdy_for_order_PaymentGestion_PaymentWaiting:
			exitSequence_Order_part_Rdy_for_order_PaymentGestion_PaymentWaiting();
			break;
		case order_part_Rdy_for_order_PaymentGestion_CheckPayment:
			exitSequence_Order_part_Rdy_for_order_PaymentGestion_CheckPayment();
			break;
		case order_part_Rdy_for_order_PaymentGestion_paimentChecked:
			exitSequence_Order_part_Rdy_for_order_PaymentGestion_paimentChecked();
			break;
		case order_part_Preparation_DrinkMaking_Step3_Option_croutons:
			exitSequence_Order_part_Preparation_DrinkMaking_Step3_Option_croutons();
			break;
		case order_part_Preparation_DrinkMaking_Step3_Option_croutonsDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step3_Option_croutonsDone();
			break;
		case order_part_Preparation_DrinkMaking_Step1_r4_GrainMashing:
			exitSequence_Order_part_Preparation_DrinkMaking_Step1_r4_GrainMashing();
			break;
		case order_part_Preparation_DrinkMaking_Step1_r4_GrainMashingDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step1_r4_GrainMashingDone();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region NoActionDetection */
	private void exitSequence_Order_part_Rdy_for_order_NoActionDetection() {
		switch (stateVector[0]) {
		case order_part_Rdy_for_order_NoActionDetection_NoActionDetected:
			exitSequence_Order_part_Rdy_for_order_NoActionDetection_NoActionDetected();
			break;
		case order_part_Rdy_for_order_NoActionDetection_ActionDetected:
			exitSequence_Order_part_Rdy_for_order_NoActionDetection_ActionDetected();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region ss */
	private void exitSequence_Order_part_Rdy_for_order_ss() {
		switch (stateVector[1]) {
		case order_part_Rdy_for_order_ss_SlidersDefault:
			exitSequence_Order_part_Rdy_for_order_ss_SlidersDefault();
			break;
		case order_part_Rdy_for_order_ss_SlidersCustomed:
			exitSequence_Order_part_Rdy_for_order_ss_SlidersCustomed();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region DrinkSelectionGestion */
	private void exitSequence_Order_part_Rdy_for_order_DrinkSelectionGestion() {
		switch (stateVector[2]) {
		case order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectionWaiting:
			exitSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectionWaiting();
			break;
		case order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected:
			exitSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region PaymentGestion */
	private void exitSequence_Order_part_Rdy_for_order_PaymentGestion() {
		switch (stateVector[3]) {
		case order_part_Rdy_for_order_PaymentGestion_PaymentWaiting:
			exitSequence_Order_part_Rdy_for_order_PaymentGestion_PaymentWaiting();
			break;
		case order_part_Rdy_for_order_PaymentGestion_CheckPayment:
			exitSequence_Order_part_Rdy_for_order_PaymentGestion_CheckPayment();
			break;
		case order_part_Rdy_for_order_PaymentGestion_paimentChecked:
			exitSequence_Order_part_Rdy_for_order_PaymentGestion_paimentChecked();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region DrinkMaking */
	private void exitSequence_Order_part_Preparation_DrinkMaking() {
		switch (stateVector[0]) {
		case order_part_Preparation_DrinkMaking_Initialization:
			exitSequence_Order_part_Preparation_DrinkMaking_Initialization();
			break;
		case order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperatureDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperatureDone();
			break;
		case order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperature:
			exitSequence_Order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperature();
			break;
		case order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrink:
			exitSequence_Order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrink();
			break;
		case order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrinkDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrinkDone();
			break;
		case order_part_Preparation_DrinkMaking_Step1_r1_PodPositionningDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step1_r1_PodPositionningDone();
			break;
		case order_part_Preparation_DrinkMaking_Step1_r1_PodPositionning:
			exitSequence_Order_part_Preparation_DrinkMaking_Step1_r1_PodPositionning();
			break;
		case order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusion:
			exitSequence_Order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusion();
			break;
		case order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusionDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusionDone();
			break;
		case order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawal:
			exitSequence_Order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawal();
			break;
		case order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawalDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawalDone();
			break;
		case order_part_Preparation_DrinkMaking_IceCream:
			exitSequence_Order_part_Preparation_DrinkMaking_IceCream();
			break;
		case order_part_Preparation_DrinkMaking_Milk:
			exitSequence_Order_part_Preparation_DrinkMaking_Milk();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case order_part_Preparation_DrinkMaking_Step2_r2_CupPositionningDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step2_r2_CupPositionningDone();
			break;
		case order_part_Preparation_DrinkMaking_Step2_r2_CupPositionning:
			exitSequence_Order_part_Preparation_DrinkMaking_Step2_r2_CupPositionning();
			break;
		case order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSize:
			exitSequence_Order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSize();
			break;
		case order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSizeDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSizeDone();
			break;
		case order_part_Preparation_DrinkMaking_Step1_r2_WaterHeatingDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step1_r2_WaterHeatingDone();
			break;
		case order_part_Preparation_DrinkMaking_Step1_r2_WaterHeating:
			exitSequence_Order_part_Preparation_DrinkMaking_Step1_r2_WaterHeating();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case order_part_Preparation_DrinkMaking_Step2_r3_GrainTampingDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step2_r3_GrainTampingDone();
			break;
		case order_part_Preparation_DrinkMaking_Step2_r3_GrainTamping:
			exitSequence_Order_part_Preparation_DrinkMaking_Step2_r3_GrainTamping();
			break;
		case order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTime:
			exitSequence_Order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTime();
			break;
		case order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTimeDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTimeDone();
			break;
		case order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionningDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionningDone();
			break;
		case order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionning:
			exitSequence_Order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionning();
			break;
		default:
			break;
		}
		
		switch (stateVector[3]) {
		case order_part_Preparation_DrinkMaking_Step3_Option_croutons:
			exitSequence_Order_part_Preparation_DrinkMaking_Step3_Option_croutons();
			break;
		case order_part_Preparation_DrinkMaking_Step3_Option_croutonsDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step3_Option_croutonsDone();
			break;
		case order_part_Preparation_DrinkMaking_Step1_r4_GrainMashing:
			exitSequence_Order_part_Preparation_DrinkMaking_Step1_r4_GrainMashing();
			break;
		case order_part_Preparation_DrinkMaking_Step1_r4_GrainMashingDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step1_r4_GrainMashingDone();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step2_r1() {
		switch (stateVector[0]) {
		case order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperatureDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperatureDone();
			break;
		case order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperature:
			exitSequence_Order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperature();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step2_r2() {
		switch (stateVector[1]) {
		case order_part_Preparation_DrinkMaking_Step2_r2_CupPositionningDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step2_r2_CupPositionningDone();
			break;
		case order_part_Preparation_DrinkMaking_Step2_r2_CupPositionning:
			exitSequence_Order_part_Preparation_DrinkMaking_Step2_r2_CupPositionning();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r3 */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step2_r3() {
		switch (stateVector[2]) {
		case order_part_Preparation_DrinkMaking_Step2_r3_GrainTampingDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step2_r3_GrainTampingDone();
			break;
		case order_part_Preparation_DrinkMaking_Step2_r3_GrainTamping:
			exitSequence_Order_part_Preparation_DrinkMaking_Step2_r3_GrainTamping();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step3_r1() {
		switch (stateVector[0]) {
		case order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrink:
			exitSequence_Order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrink();
			break;
		case order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrinkDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrinkDone();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step3_r2() {
		switch (stateVector[1]) {
		case order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSize:
			exitSequence_Order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSize();
			break;
		case order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSizeDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSizeDone();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r3 */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step3_r3() {
		switch (stateVector[2]) {
		case order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTime:
			exitSequence_Order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTime();
			break;
		case order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTimeDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTimeDone();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Option */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step3_Option() {
		switch (stateVector[3]) {
		case order_part_Preparation_DrinkMaking_Step3_Option_croutons:
			exitSequence_Order_part_Preparation_DrinkMaking_Step3_Option_croutons();
			break;
		case order_part_Preparation_DrinkMaking_Step3_Option_croutonsDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step3_Option_croutonsDone();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step1_r1() {
		switch (stateVector[0]) {
		case order_part_Preparation_DrinkMaking_Step1_r1_PodPositionningDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step1_r1_PodPositionningDone();
			break;
		case order_part_Preparation_DrinkMaking_Step1_r1_PodPositionning:
			exitSequence_Order_part_Preparation_DrinkMaking_Step1_r1_PodPositionning();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step1_r2() {
		switch (stateVector[1]) {
		case order_part_Preparation_DrinkMaking_Step1_r2_WaterHeatingDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step1_r2_WaterHeatingDone();
			break;
		case order_part_Preparation_DrinkMaking_Step1_r2_WaterHeating:
			exitSequence_Order_part_Preparation_DrinkMaking_Step1_r2_WaterHeating();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r3 */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step1_r3() {
		switch (stateVector[2]) {
		case order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionningDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionningDone();
			break;
		case order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionning:
			exitSequence_Order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionning();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r4 */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step1_r4() {
		switch (stateVector[3]) {
		case order_part_Preparation_DrinkMaking_Step1_r4_GrainMashing:
			exitSequence_Order_part_Preparation_DrinkMaking_Step1_r4_GrainMashing();
			break;
		case order_part_Preparation_DrinkMaking_Step1_r4_GrainMashingDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step1_r4_GrainMashingDone();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step4_r1() {
		switch (stateVector[0]) {
		case order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusion:
			exitSequence_Order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusion();
			break;
		case order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusionDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusionDone();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Step5_r1() {
		switch (stateVector[0]) {
		case order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawal:
			exitSequence_Order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawal();
			break;
		case order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawalDone:
			exitSequence_Order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawalDone();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_Order_part_Preparation_DrinkMaking__choice_0() {
		if (check_Order_part_Preparation_DrinkMaking__choice_0_tr0_tr0()) {
			effect_Order_part_Preparation_DrinkMaking__choice_0_tr0();
		} else {
			if (check_Order_part_Preparation_DrinkMaking__choice_0_tr1_tr1()) {
				effect_Order_part_Preparation_DrinkMaking__choice_0_tr1();
			} else {
				effect_Order_part_Preparation_DrinkMaking__choice_0_tr2();
			}
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_Order_part__entry_Default() {
		enterSequence_Order_part_Rdy_for_order_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Order_part_Rdy_for_order_NoActionDetection__entry_Default() {
		enterSequence_Order_part_Rdy_for_order_NoActionDetection_NoActionDetected_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Order_part_Rdy_for_order_ss__entry_Default() {
		enterSequence_Order_part_Rdy_for_order_ss_SlidersDefault_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Order_part_Rdy_for_order_DrinkSelectionGestion__entry_Default() {
		enterSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectionWaiting_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Order_part_Rdy_for_order_PaymentGestion__entry_Default() {
		enterSequence_Order_part_Rdy_for_order_PaymentGestion_PaymentWaiting_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Order_part_Preparation_DrinkMaking__entry_Default() {
		enterSequence_Order_part_Preparation_DrinkMaking_Initialization_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Order_part_Preparation_DrinkMaking_Step2_r1__entry_Default() {
		enterSequence_Order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperature_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Order_part_Preparation_DrinkMaking_Step2_r2__entry_Default() {
		enterSequence_Order_part_Preparation_DrinkMaking_Step2_r2_CupPositionning_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Order_part_Preparation_DrinkMaking_Step2_r3__entry_Default() {
		enterSequence_Order_part_Preparation_DrinkMaking_Step2_r3_GrainTamping_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Order_part_Preparation_DrinkMaking_Step3_r1__entry_Default() {
		enterSequence_Order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrink_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Order_part_Preparation_DrinkMaking_Step3_r2__entry_Default() {
		enterSequence_Order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSize_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Order_part_Preparation_DrinkMaking_Step3_r3__entry_Default() {
		enterSequence_Order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTime_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Order_part_Preparation_DrinkMaking_Step3_Option__entry_Default() {
		enterSequence_Order_part_Preparation_DrinkMaking_Step3_Option_croutons_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Order_part_Preparation_DrinkMaking_Step1_r1__entry_Default() {
		enterSequence_Order_part_Preparation_DrinkMaking_Step1_r1_PodPositionning_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Order_part_Preparation_DrinkMaking_Step1_r2__entry_Default() {
		enterSequence_Order_part_Preparation_DrinkMaking_Step1_r2_WaterHeating_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Order_part_Preparation_DrinkMaking_Step1_r3__entry_Default() {
		enterSequence_Order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionning_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Order_part_Preparation_DrinkMaking_Step1_r4__entry_Default() {
		enterSequence_Order_part_Preparation_DrinkMaking_Step1_r4_GrainMashing_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Order_part_Preparation_DrinkMaking_Step4_r1__entry_Default() {
		enterSequence_Order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusion_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Order_part_Preparation_DrinkMaking_Step5_r1__entry_Default() {
		enterSequence_Order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawal_default();
	}
	
	/* The reactions of exit default. */
	private void react_Order_part_Preparation_DrinkMaking__exit_Default() {
		effect_Order_part_Preparation_tr0();
	}
	
	/* The reactions of state null. */
	private void react_Order_part_Preparation_DrinkMaking__sync0() {
		enterSequence_Order_part_Preparation_DrinkMaking_Step3_default();
	}
	
	/* The reactions of state null. */
	private void react_Order_part_Preparation_DrinkMaking__sync1() {
		react_Order_part_Preparation_DrinkMaking__choice_0();
	}
	
	/* The reactions of state null. */
	private void react_Order_part_Preparation_DrinkMaking__sync2() {
		enterSequence_Order_part_Preparation_DrinkMaking_Step2_default();
	}
	
	/* The reactions of state null. */
	private void react_Order_part_Preparation_DrinkMaking__sync3() {
		enterSequence_Order_part_Preparation_DrinkMaking_Step2_default();
	}
	
	/* The reactions of state null. */
	private void react_Order_part_Preparation_DrinkMaking__sync4() {
		enterSequence_Order_part_Preparation_DrinkMaking_Step2_default();
	}
	
	/* The reactions of state null. */
	private void react_Order_part_Preparation_DrinkMaking__sync5() {
		enterSequence_Order_part_Preparation_DrinkMaking_Step3_default();
	}
	
	/* The reactions of state null. */
	private void react_Order_part_Preparation_DrinkMaking__sync6() {
		enterSequence_Order_part_Preparation_DrinkMaking_Step3_default();
	}
	
	/* The reactions of state null. */
	private void react_Order_part_Preparation_DrinkMaking__sync7() {
		react_Order_part_Preparation_DrinkMaking__choice_0();
	}
	
	/* The reactions of state null. */
	private void react_Order_part_Preparation_DrinkMaking__sync8() {
		enterSequence_Order_part_Preparation_DrinkMaking_Step4_default();
	}
	
	/* The reactions of state null. */
	private void react_Order_part__sync0() {
		enterSequence_Order_part_Preparation_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean order_part_Rdy_for_order_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean order_part_Rdy_for_order_NoActionDetection_NoActionDetected_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.sliderModified || (sCInterface.drinkSelectionDone || (sCInterface.optionSelection || (sCInterface.nFC || (sCInterface.addCoin || sCInterface.cancel)))))) {
				exitSequence_Order_part_Rdy_for_order_NoActionDetection_NoActionDetected();
				enterSequence_Order_part_Rdy_for_order_NoActionDetection_ActionDetected_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean order_part_Rdy_for_order_NoActionDetection_ActionDetected_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[0]) {
				exitSequence_Order_part_Rdy_for_order_NoActionDetection_ActionDetected();
				sCInterface.raiseNoActionFor45sec();
				
				enterSequence_Order_part_Rdy_for_order_NoActionDetection_NoActionDetected_default();
			} else {
				if ((sCInterface.sliderModified || (sCInterface.drinkSelectionDone || (sCInterface.optionSelection || (sCInterface.nFC || (sCInterface.addCoin || sCInterface.cancel)))))) {
					exitSequence_Order_part_Rdy_for_order_NoActionDetection_ActionDetected();
					enterSequence_Order_part_Rdy_for_order_NoActionDetection_ActionDetected_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean order_part_Rdy_for_order_ss_SlidersDefault_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.sliderModified) {
				exitSequence_Order_part_Rdy_for_order_ss_SlidersDefault();
				enterSequence_Order_part_Rdy_for_order_ss_SlidersCustomed_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean order_part_Rdy_for_order_ss_SlidersCustomed_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.noActionFor45sec) {
				exitSequence_Order_part_Rdy_for_order_ss_SlidersCustomed();
				sCInterface.raiseDoResetSliders();
				
				enterSequence_Order_part_Rdy_for_order_ss_SlidersDefault_default();
			} else {
				if (sCInterface.sliderModified) {
					exitSequence_Order_part_Rdy_for_order_ss_SlidersCustomed();
					enterSequence_Order_part_Rdy_for_order_ss_SlidersCustomed_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectionWaiting_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.drinkSelectionDone) {
				exitSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectionWaiting();
				enterSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.noActionFor45sec) {
				exitSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected();
				sCInterface.raiseDoResetOperation();
				
				enterSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectionWaiting_default();
			} else {
				if ((isStateActive(State.order_part_Rdy_for_order_PaymentGestion_paimentChecked) && timeEvents[2])) {
					exitSequence_Order_part_Rdy_for_order();
					react_Order_part__sync0();
				} else {
					if (sCInterface.drinkSelectionDone) {
						exitSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected();
						enterSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean order_part_Rdy_for_order_PaymentGestion_PaymentWaiting_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.addCoin) {
				exitSequence_Order_part_Rdy_for_order_PaymentGestion_PaymentWaiting();
				enterSequence_Order_part_Rdy_for_order_PaymentGestion_CheckPayment_default();
				order_part_Rdy_for_order_react(false);
			} else {
				if (sCInterface.nFC) {
					exitSequence_Order_part_Rdy_for_order_PaymentGestion_PaymentWaiting();
					enterSequence_Order_part_Rdy_for_order_PaymentGestion_paimentChecked_default();
					order_part_Rdy_for_order_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = order_part_Rdy_for_order_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Rdy_for_order_PaymentGestion_CheckPayment_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.noActionFor45sec || sCInterface.cancel)) {
				exitSequence_Order_part_Rdy_for_order_PaymentGestion_CheckPayment();
				sCInterface.raiseDoResetPayment();
				
				enterSequence_Order_part_Rdy_for_order_PaymentGestion_PaymentWaiting_default();
				order_part_Rdy_for_order_react(false);
			} else {
				if (((timeEvents[1]) && (sCInterface.getPaymentChecked()))) {
					exitSequence_Order_part_Rdy_for_order_PaymentGestion_CheckPayment();
					enterSequence_Order_part_Rdy_for_order_PaymentGestion_paimentChecked_default();
					order_part_Rdy_for_order_react(false);
				} else {
					if (sCInterface.addCoin) {
						exitSequence_Order_part_Rdy_for_order_PaymentGestion_CheckPayment();
						enterSequence_Order_part_Rdy_for_order_PaymentGestion_CheckPayment_default();
						order_part_Rdy_for_order_react(false);
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = order_part_Rdy_for_order_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Rdy_for_order_PaymentGestion_paimentChecked_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.noActionFor45sec || sCInterface.cancel)) {
				exitSequence_Order_part_Rdy_for_order_PaymentGestion_paimentChecked();
				sCInterface.raiseDoResetPayment();
				
				enterSequence_Order_part_Rdy_for_order_PaymentGestion_PaymentWaiting_default();
				order_part_Rdy_for_order_react(false);
			} else {
				if ((timeEvents[2] && isStateActive(State.order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected))) {
					exitSequence_Order_part_Rdy_for_order();
					react_Order_part__sync0();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = order_part_Rdy_for_order_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Initialization_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[3]) && (sCInterface.getOkForCoffeeStep1()))) {
				exitSequence_Order_part_Preparation_DrinkMaking_Initialization();
				enterSequence_Order_part_Preparation_DrinkMaking_Step1_default();
				order_part_Preparation_react(false);
			} else {
				if (((timeEvents[4]) && (sCInterface.getOkForTeaStep1()))) {
					exitSequence_Order_part_Preparation_DrinkMaking_Initialization();
					enterSequence_Order_part_Preparation_DrinkMaking_Step1_default();
					order_part_Preparation_react(false);
				} else {
					if (((timeEvents[5]) && (sCInterface.getOkForExpressoStep1()))) {
						exitSequence_Order_part_Preparation_DrinkMaking_Initialization();
						enterSequence_Order_part_Preparation_DrinkMaking_Step1_default();
						order_part_Preparation_react(false);
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = order_part_Preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step2_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = order_part_Preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperatureDone_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.getOkForCoffeeStep3() && isStateActive(State.order_part_Preparation_DrinkMaking_Step2_r2_CupPositionningDone))) {
				exitSequence_Order_part_Preparation_DrinkMaking_Step2();
				react_Order_part_Preparation_DrinkMaking__sync0();
			} else {
				if (((sCInterface.getOkForExpressoStep3() && isStateActive(State.order_part_Preparation_DrinkMaking_Step2_r2_CupPositionningDone)) && isStateActive(State.order_part_Preparation_DrinkMaking_Step2_r3_GrainTampingDone))) {
					exitSequence_Order_part_Preparation_DrinkMaking_Step2();
					react_Order_part_Preparation_DrinkMaking__sync6();
				} else {
					if ((sCInterface.getOkForTeaStep3() && isStateActive(State.order_part_Preparation_DrinkMaking_Step2_r2_CupPositionningDone))) {
						exitSequence_Order_part_Preparation_DrinkMaking_Step2();
						react_Order_part_Preparation_DrinkMaking__sync5();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperature_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[6]) && (((sCInterface.getOkForCoffeeStep2() || sCInterface.getOkForTeaStep2()) || sCInterface.getOkForExpressoStep2())))) {
				exitSequence_Order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperature();
				enterSequence_Order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperatureDone_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step2_r2_CupPositionningDone_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((isStateActive(State.order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperatureDone) && sCInterface.getOkForCoffeeStep3())) {
				exitSequence_Order_part_Preparation_DrinkMaking_Step2();
				react_Order_part_Preparation_DrinkMaking__sync0();
			} else {
				if (((isStateActive(State.order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperatureDone) && sCInterface.getOkForExpressoStep3()) && isStateActive(State.order_part_Preparation_DrinkMaking_Step2_r3_GrainTampingDone))) {
					exitSequence_Order_part_Preparation_DrinkMaking_Step2();
					react_Order_part_Preparation_DrinkMaking__sync6();
				} else {
					if ((isStateActive(State.order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperatureDone) && sCInterface.getOkForTeaStep3())) {
						exitSequence_Order_part_Preparation_DrinkMaking_Step2();
						react_Order_part_Preparation_DrinkMaking__sync5();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step2_r2_CupPositionning_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[7]) && (((sCInterface.getOkForCoffeeStep2() || sCInterface.getOkForTeaStep2()) || sCInterface.getOkForExpressoStep2())))) {
				exitSequence_Order_part_Preparation_DrinkMaking_Step2_r2_CupPositionning();
				enterSequence_Order_part_Preparation_DrinkMaking_Step2_r2_CupPositionningDone_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step2_r3_GrainTampingDone_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((isStateActive(State.order_part_Preparation_DrinkMaking_Step2_r1_WaitingForTemperatureDone) && sCInterface.getOkForExpressoStep3()) && isStateActive(State.order_part_Preparation_DrinkMaking_Step2_r2_CupPositionningDone))) {
				exitSequence_Order_part_Preparation_DrinkMaking_Step2();
				react_Order_part_Preparation_DrinkMaking__sync6();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = order_part_Preparation_DrinkMaking_Step2_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step2_r3_GrainTamping_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[8]) && (sCInterface.getOkForExpressoStep2()))) {
				exitSequence_Order_part_Preparation_DrinkMaking_Step2_r3_GrainTamping();
				enterSequence_Order_part_Preparation_DrinkMaking_Step2_r3_GrainTampingDone_default();
				order_part_Preparation_DrinkMaking_Step2_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = order_part_Preparation_DrinkMaking_Step2_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step3_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = order_part_Preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrink_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[9]) && (((sCInterface.getOkForCoffeeStep3() || sCInterface.getOkForTeaStep3()) || sCInterface.getOkForExpressoStep3())))) {
				exitSequence_Order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrink();
				enterSequence_Order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrinkDone_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrinkDone_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.getReadyToDeliver() && isStateActive(State.order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSizeDone))) {
				exitSequence_Order_part_Preparation_DrinkMaking_Step3();
				react_Order_part_Preparation_DrinkMaking__sync1();
			} else {
				if ((sCInterface.getReadyToDeliver() && isStateActive(State.order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTimeDone))) {
					exitSequence_Order_part_Preparation_DrinkMaking_Step3();
					react_Order_part_Preparation_DrinkMaking__sync7();
				} else {
					if ((sCInterface.getOkForTeaStep4() && isStateActive(State.order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSizeDone))) {
						exitSequence_Order_part_Preparation_DrinkMaking_Step3();
						react_Order_part_Preparation_DrinkMaking__sync8();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSize_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[10]) && ((sCInterface.getOkForCoffeeStep3() || sCInterface.getOkForTeaStep3())))) {
				exitSequence_Order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSize();
				enterSequence_Order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSizeDone_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step3_r2_PooringWaterForSizeDone_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((isStateActive(State.order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrinkDone) && sCInterface.getReadyToDeliver())) {
				exitSequence_Order_part_Preparation_DrinkMaking_Step3();
				react_Order_part_Preparation_DrinkMaking__sync1();
			} else {
				if ((isStateActive(State.order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrinkDone) && sCInterface.getOkForTeaStep4())) {
					exitSequence_Order_part_Preparation_DrinkMaking_Step3();
					react_Order_part_Preparation_DrinkMaking__sync8();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTime_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[11]) && (sCInterface.getOkForExpressoStep3()))) {
				exitSequence_Order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTime();
				enterSequence_Order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTimeDone_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step3_r3_PooringWaterForTimeDone_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((isStateActive(State.order_part_Preparation_DrinkMaking_Step3_r1_SugarTheDrinkDone) && sCInterface.getReadyToDeliver())) {
				exitSequence_Order_part_Preparation_DrinkMaking_Step3();
				react_Order_part_Preparation_DrinkMaking__sync7();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step3_Option_croutons_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[12]) && (sCInterface.getOkForSoupeStep3()))) {
				exitSequence_Order_part_Preparation_DrinkMaking_Step3_Option_croutons();
				enterSequence_Order_part_Preparation_DrinkMaking_Step3_Option_croutonsDone_default();
				order_part_Preparation_DrinkMaking_Step3_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = order_part_Preparation_DrinkMaking_Step3_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step3_Option_croutonsDone_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = order_part_Preparation_DrinkMaking_Step3_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step1_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = order_part_Preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step1_r1_PodPositionningDone_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.getOkForCoffeeStep2() && isStateActive(State.order_part_Preparation_DrinkMaking_Step1_r2_WaterHeatingDone))) {
				exitSequence_Order_part_Preparation_DrinkMaking_Step1();
				react_Order_part_Preparation_DrinkMaking__sync2();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step1_r1_PodPositionning_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[13]) && (sCInterface.getOkForCoffeeStep1()))) {
				exitSequence_Order_part_Preparation_DrinkMaking_Step1_r1_PodPositionning();
				enterSequence_Order_part_Preparation_DrinkMaking_Step1_r1_PodPositionningDone_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step1_r2_WaterHeatingDone_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((isStateActive(State.order_part_Preparation_DrinkMaking_Step1_r1_PodPositionningDone) && sCInterface.getOkForCoffeeStep2())) {
				exitSequence_Order_part_Preparation_DrinkMaking_Step1();
				react_Order_part_Preparation_DrinkMaking__sync2();
			} else {
				if ((sCInterface.getOkForExpressoStep2() && isStateActive(State.order_part_Preparation_DrinkMaking_Step1_r4_GrainMashingDone))) {
					exitSequence_Order_part_Preparation_DrinkMaking_Step1();
					react_Order_part_Preparation_DrinkMaking__sync3();
				} else {
					if ((sCInterface.getOkForTeaStep2() && isStateActive(State.order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionningDone))) {
						exitSequence_Order_part_Preparation_DrinkMaking_Step1();
						react_Order_part_Preparation_DrinkMaking__sync4();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step1_r2_WaterHeating_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[14]) && (((sCInterface.getOkForCoffeeStep1() || sCInterface.getOkForTeaStep1()) || sCInterface.getOkForExpressoStep1())))) {
				exitSequence_Order_part_Preparation_DrinkMaking_Step1_r2_WaterHeating();
				enterSequence_Order_part_Preparation_DrinkMaking_Step1_r2_WaterHeatingDone_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionningDone_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((isStateActive(State.order_part_Preparation_DrinkMaking_Step1_r2_WaterHeatingDone) && sCInterface.getOkForTeaStep2())) {
				exitSequence_Order_part_Preparation_DrinkMaking_Step1();
				react_Order_part_Preparation_DrinkMaking__sync4();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionning_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[15]) && (sCInterface.getOkForTeaStep1()))) {
				exitSequence_Order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionning();
				enterSequence_Order_part_Preparation_DrinkMaking_Step1_r3_SachetPositionningDone_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step1_r4_GrainMashing_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[16]) && (sCInterface.getOkForExpressoStep1()))) {
				exitSequence_Order_part_Preparation_DrinkMaking_Step1_r4_GrainMashing();
				enterSequence_Order_part_Preparation_DrinkMaking_Step1_r4_GrainMashingDone_default();
				order_part_Preparation_DrinkMaking_Step1_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = order_part_Preparation_DrinkMaking_Step1_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step1_r4_GrainMashingDone_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((isStateActive(State.order_part_Preparation_DrinkMaking_Step1_r2_WaterHeatingDone) && sCInterface.getOkForExpressoStep2())) {
				exitSequence_Order_part_Preparation_DrinkMaking_Step1();
				react_Order_part_Preparation_DrinkMaking__sync3();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = order_part_Preparation_DrinkMaking_Step1_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step4_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = order_part_Preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusion_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[17]) && (sCInterface.getOkForTeaStep4()))) {
				exitSequence_Order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusion();
				enterSequence_Order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusionDone_default();
				order_part_Preparation_DrinkMaking_Step4_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = order_part_Preparation_DrinkMaking_Step4_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step4_r1_WaitingForInfusionDone_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.getOkForTeaStep5()) {
				exitSequence_Order_part_Preparation_DrinkMaking_Step4();
				enterSequence_Order_part_Preparation_DrinkMaking_Step5_default();
				order_part_Preparation_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = order_part_Preparation_DrinkMaking_Step4_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step5_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = order_part_Preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawal_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[18]) && (sCInterface.getOkForTeaStep5()))) {
				exitSequence_Order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawal();
				enterSequence_Order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawalDone_default();
				order_part_Preparation_DrinkMaking_Step5_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = order_part_Preparation_DrinkMaking_Step5_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Step5_r1_SachetWithdrawalDone_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.getReadyToDeliver() && !sCInterface.getMilk())) {
				exitSequence_Order_part_Preparation_DrinkMaking_Step5();
				react_Order_part_Preparation_DrinkMaking__exit_Default();
			} else {
				if ((sCInterface.getReadyToDeliver() && sCInterface.getMilk())) {
					exitSequence_Order_part_Preparation_DrinkMaking_Step5();
					enterSequence_Order_part_Preparation_DrinkMaking_Milk_default();
					order_part_Preparation_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = order_part_Preparation_DrinkMaking_Step5_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_IceCream_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[19]) && (sCInterface.getMilk()))) {
				exitSequence_Order_part_Preparation_DrinkMaking_IceCream();
				enterSequence_Order_part_Preparation_DrinkMaking_Milk_default();
				order_part_Preparation_react(false);
			} else {
				if (((timeEvents[20]) && (!sCInterface.getMilk()))) {
					exitSequence_Order_part_Preparation_DrinkMaking_IceCream();
					react_Order_part_Preparation_DrinkMaking__exit_Default();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = order_part_Preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Milk_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[21]) {
				exitSequence_Order_part_Preparation_DrinkMaking_Milk();
				react_Order_part_Preparation_DrinkMaking__exit_Default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = order_part_Preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_waitingForRecuperation_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.removeCup) {
				exitSequence_Order_part_waitingForRecuperation();
				sCInterface.raiseDoPrepareForNextOrder();
				
				enterSequence_Order_part_Rdy_for_order_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
