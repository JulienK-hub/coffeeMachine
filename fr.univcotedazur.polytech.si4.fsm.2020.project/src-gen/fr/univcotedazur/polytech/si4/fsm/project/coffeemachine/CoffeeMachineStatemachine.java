/** Generated by YAKINDU Statechart Tools code generator. */
package fr.univcotedazur.polytech.si4.fsm.project.coffeemachine;

import fr.univcotedazur.polytech.si4.fsm.project.ITimer;
import java.util.LinkedList;
import java.util.List;

public class CoffeeMachineStatemachine implements ICoffeeMachineStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private List<SCInterfaceListener> listeners = new LinkedList<SCInterfaceListener>();
		
		public List<SCInterfaceListener> getListeners() {
			return listeners;
		}
		private boolean orderDelivered;
		
		
		public void raiseOrderDelivered() {
			synchronized(CoffeeMachineStatemachine.this) {
				orderDelivered = true;
			}
		}
		
		private boolean sliderModified;
		
		
		public void raiseSliderModified() {
			synchronized(CoffeeMachineStatemachine.this) {
				sliderModified = true;
			}
		}
		
		private boolean removeCup;
		
		
		public void raiseRemoveCup() {
			synchronized(CoffeeMachineStatemachine.this) {
				removeCup = true;
			}
		}
		
		private boolean drinkSelectionDone;
		
		
		public void raiseDrinkSelectionDone() {
			synchronized(CoffeeMachineStatemachine.this) {
				drinkSelectionDone = true;
			}
		}
		
		private boolean addCoin;
		
		
		public void raiseAddCoin() {
			synchronized(CoffeeMachineStatemachine.this) {
				addCoin = true;
			}
		}
		
		private boolean notEnough;
		
		
		public void raiseNotEnough() {
			synchronized(CoffeeMachineStatemachine.this) {
				notEnough = true;
			}
		}
		
		private boolean cancel;
		
		
		public void raiseCancel() {
			synchronized(CoffeeMachineStatemachine.this) {
				cancel = true;
			}
		}
		
		private boolean nFC;
		
		
		public void raiseNFC() {
			synchronized(CoffeeMachineStatemachine.this) {
				nFC = true;
			}
		}
		
		private boolean expresso;
		
		
		public void raiseExpresso() {
			synchronized(CoffeeMachineStatemachine.this) {
				expresso = true;
			}
		}
		
		private boolean tea;
		
		
		public void raiseTea() {
			synchronized(CoffeeMachineStatemachine.this) {
				tea = true;
			}
		}
		
		private boolean okForExpressoStep2;
		
		
		public void raiseOkForExpressoStep2() {
			synchronized(CoffeeMachineStatemachine.this) {
				okForExpressoStep2 = true;
			}
		}
		
		private boolean okForExpressoStep3;
		
		
		public void raiseOkForExpressoStep3() {
			synchronized(CoffeeMachineStatemachine.this) {
				okForExpressoStep3 = true;
			}
		}
		
		private boolean okForTeaStep2;
		
		
		public void raiseOkForTeaStep2() {
			synchronized(CoffeeMachineStatemachine.this) {
				okForTeaStep2 = true;
			}
		}
		
		private boolean okForTeaStep3;
		
		
		public void raiseOkForTeaStep3() {
			synchronized(CoffeeMachineStatemachine.this) {
				okForTeaStep3 = true;
			}
		}
		
		private boolean okForTeaStep4;
		
		
		public void raiseOkForTeaStep4() {
			synchronized(CoffeeMachineStatemachine.this) {
				okForTeaStep4 = true;
			}
		}
		
		private boolean okForTeaStep5;
		
		
		public void raiseOkForTeaStep5() {
			synchronized(CoffeeMachineStatemachine.this) {
				okForTeaStep5 = true;
			}
		}
		
		private boolean doPrepareForNextOrder;
		
		
		public boolean isRaisedDoPrepareForNextOrder() {
			synchronized(CoffeeMachineStatemachine.this) {
				return doPrepareForNextOrder;
			}
		}
		
		protected void raiseDoPrepareForNextOrder() {
			synchronized(CoffeeMachineStatemachine.this) {
				doPrepareForNextOrder = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoPrepareForNextOrderRaised();
				}
			}
		}
		
		private boolean doResetDrinkSelected;
		
		
		public boolean isRaisedDoResetDrinkSelected() {
			synchronized(CoffeeMachineStatemachine.this) {
				return doResetDrinkSelected;
			}
		}
		
		protected void raiseDoResetDrinkSelected() {
			synchronized(CoffeeMachineStatemachine.this) {
				doResetDrinkSelected = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoResetDrinkSelectedRaised();
				}
			}
		}
		
		private boolean doResetPayment;
		
		
		public boolean isRaisedDoResetPayment() {
			synchronized(CoffeeMachineStatemachine.this) {
				return doResetPayment;
			}
		}
		
		protected void raiseDoResetPayment() {
			synchronized(CoffeeMachineStatemachine.this) {
				doResetPayment = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoResetPaymentRaised();
				}
			}
		}
		
		private boolean doCheckPayment;
		
		
		public boolean isRaisedDoCheckPayment() {
			synchronized(CoffeeMachineStatemachine.this) {
				return doCheckPayment;
			}
		}
		
		protected void raiseDoCheckPayment() {
			synchronized(CoffeeMachineStatemachine.this) {
				doCheckPayment = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoCheckPaymentRaised();
				}
			}
		}
		
		private boolean doStartPreparation;
		
		
		public boolean isRaisedDoStartPreparation() {
			synchronized(CoffeeMachineStatemachine.this) {
				return doStartPreparation;
			}
		}
		
		protected void raiseDoStartPreparation() {
			synchronized(CoffeeMachineStatemachine.this) {
				doStartPreparation = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoStartPreparationRaised();
				}
			}
		}
		
		private boolean doResetSliders;
		
		
		public boolean isRaisedDoResetSliders() {
			synchronized(CoffeeMachineStatemachine.this) {
				return doResetSliders;
			}
		}
		
		protected void raiseDoResetSliders() {
			synchronized(CoffeeMachineStatemachine.this) {
				doResetSliders = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoResetSlidersRaised();
				}
			}
		}
		
		private boolean doWaitForRecuperation;
		
		
		public boolean isRaisedDoWaitForRecuperation() {
			synchronized(CoffeeMachineStatemachine.this) {
				return doWaitForRecuperation;
			}
		}
		
		protected void raiseDoWaitForRecuperation() {
			synchronized(CoffeeMachineStatemachine.this) {
				doWaitForRecuperation = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoWaitForRecuperationRaised();
				}
			}
		}
		
		private boolean noActionFor45sec;
		
		
		public boolean isRaisedNoActionFor45sec() {
			synchronized(CoffeeMachineStatemachine.this) {
				return noActionFor45sec;
			}
		}
		
		protected void raiseNoActionFor45sec() {
			synchronized(CoffeeMachineStatemachine.this) {
				noActionFor45sec = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onNoActionFor45secRaised();
				}
			}
		}
		
		private boolean doNextPreparationStep;
		
		
		public boolean isRaisedDoNextPreparationStep() {
			synchronized(CoffeeMachineStatemachine.this) {
				return doNextPreparationStep;
			}
		}
		
		protected void raiseDoNextPreparationStep() {
			synchronized(CoffeeMachineStatemachine.this) {
				doNextPreparationStep = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoNextPreparationStepRaised();
				}
			}
		}
		
		private boolean coffee;
		
		public synchronized boolean getCoffee() {
			synchronized(CoffeeMachineStatemachine.this) {
				return coffee;
			}
		}
		
		public void setCoffee(boolean value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.coffee = value;
			}
		}
		
		private boolean okForCoffeeStep2;
		
		public synchronized boolean getOkForCoffeeStep2() {
			synchronized(CoffeeMachineStatemachine.this) {
				return okForCoffeeStep2;
			}
		}
		
		public void setOkForCoffeeStep2(boolean value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.okForCoffeeStep2 = value;
			}
		}
		
		private boolean okForCoffeeStep3;
		
		public synchronized boolean getOkForCoffeeStep3() {
			synchronized(CoffeeMachineStatemachine.this) {
				return okForCoffeeStep3;
			}
		}
		
		public void setOkForCoffeeStep3(boolean value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.okForCoffeeStep3 = value;
			}
		}
		
		private boolean readyToDeliver;
		
		public synchronized boolean getReadyToDeliver() {
			synchronized(CoffeeMachineStatemachine.this) {
				return readyToDeliver;
			}
		}
		
		public void setReadyToDeliver(boolean value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.readyToDeliver = value;
			}
		}
		
		private boolean paymentChecked;
		
		public synchronized boolean getPaymentChecked() {
			synchronized(CoffeeMachineStatemachine.this) {
				return paymentChecked;
			}
		}
		
		public void setPaymentChecked(boolean value) {
			synchronized(CoffeeMachineStatemachine.this) {
				this.paymentChecked = value;
			}
		}
		
		protected void clearEvents() {
			orderDelivered = false;
			sliderModified = false;
			removeCup = false;
			drinkSelectionDone = false;
			addCoin = false;
			notEnough = false;
			cancel = false;
			nFC = false;
			expresso = false;
			tea = false;
			okForExpressoStep2 = false;
			okForExpressoStep3 = false;
			okForTeaStep2 = false;
			okForTeaStep3 = false;
			okForTeaStep4 = false;
			okForTeaStep5 = false;
		}
		protected void clearOutEvents() {
		
		doPrepareForNextOrder = false;
		doResetDrinkSelected = false;
		doResetPayment = false;
		doCheckPayment = false;
		doStartPreparation = false;
		doResetSliders = false;
		doWaitForRecuperation = false;
		noActionFor45sec = false;
		doNextPreparationStep = false;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		order_part_Rdy_for_order,
		order_part_Rdy_for_order_NoActionDetection_NoActionDetected,
		order_part_Rdy_for_order_NoActionDetection_ActionDetected,
		order_part_Rdy_for_order_SlidersGestion_SlidersDefault,
		order_part_Rdy_for_order_SlidersGestion_SlidersCustomed,
		order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectedWaiting,
		order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected,
		order_part_Rdy_for_order_PaymentGestion_PaymentWaiting,
		order_part_Rdy_for_order_PaymentGestion_PaimentNFC,
		order_part_Rdy_for_order_PaymentGestion_CheckPayment,
		order_part_Rdy_for_order_PaymentGestion_paimentChecked,
		order_part_Preparation,
		order_part_Preparation_DrinkMaking_Initialization,
		order_part_Preparation_DrinkMaking_PodPositionning___WaterHeating,
		order_part_Preparation_DrinkMaking_GrainMashing___WaterHeating,
		order_part_Preparation_DrinkMaking_SachetPositionning___WaterHeating,
		order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning,
		order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForSize,
		order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning___GrainTamping,
		order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForTime,
		order_part_Preparation_DrinkMaking_WaitingForInfusion,
		order_part_Preparation_DrinkMaking_SachetWithdrawal,
		order_part_waitingForRecuperation,
		$NullState$
	};
	
	private final State[] stateVector = new State[4];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[8];
	
	public CoffeeMachineStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		for (int i = 0; i < 4; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCInterface.setCoffee(false);
		
		sCInterface.setOkForCoffeeStep2(false);
		
		sCInterface.setOkForCoffeeStep3(false);
		
		sCInterface.setReadyToDeliver(false);
		
		sCInterface.setPaymentChecked(false);
	}
	
	public synchronized void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_Order_part_default();
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case order_part_Rdy_for_order_NoActionDetection_NoActionDetected:
				order_part_Rdy_for_order_NoActionDetection_NoActionDetected_react(true);
				break;
			case order_part_Rdy_for_order_NoActionDetection_ActionDetected:
				order_part_Rdy_for_order_NoActionDetection_ActionDetected_react(true);
				break;
			case order_part_Rdy_for_order_SlidersGestion_SlidersDefault:
				order_part_Rdy_for_order_SlidersGestion_SlidersDefault_react(true);
				break;
			case order_part_Rdy_for_order_SlidersGestion_SlidersCustomed:
				order_part_Rdy_for_order_SlidersGestion_SlidersCustomed_react(true);
				break;
			case order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectedWaiting:
				order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectedWaiting_react(true);
				break;
			case order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected:
				order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected_react(true);
				break;
			case order_part_Rdy_for_order_PaymentGestion_PaymentWaiting:
				order_part_Rdy_for_order_PaymentGestion_PaymentWaiting_react(true);
				break;
			case order_part_Rdy_for_order_PaymentGestion_PaimentNFC:
				order_part_Rdy_for_order_PaymentGestion_PaimentNFC_react(true);
				break;
			case order_part_Rdy_for_order_PaymentGestion_CheckPayment:
				order_part_Rdy_for_order_PaymentGestion_CheckPayment_react(true);
				break;
			case order_part_Rdy_for_order_PaymentGestion_paimentChecked:
				order_part_Rdy_for_order_PaymentGestion_paimentChecked_react(true);
				break;
			case order_part_Preparation_DrinkMaking_Initialization:
				order_part_Preparation_DrinkMaking_Initialization_react(true);
				break;
			case order_part_Preparation_DrinkMaking_PodPositionning___WaterHeating:
				order_part_Preparation_DrinkMaking_PodPositionning___WaterHeating_react(true);
				break;
			case order_part_Preparation_DrinkMaking_GrainMashing___WaterHeating:
				order_part_Preparation_DrinkMaking_GrainMashing___WaterHeating_react(true);
				break;
			case order_part_Preparation_DrinkMaking_SachetPositionning___WaterHeating:
				order_part_Preparation_DrinkMaking_SachetPositionning___WaterHeating_react(true);
				break;
			case order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning:
				order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning_react(true);
				break;
			case order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForSize:
				order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForSize_react(true);
				break;
			case order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning___GrainTamping:
				order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning___GrainTamping_react(true);
				break;
			case order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForTime:
				order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForTime_react(true);
				break;
			case order_part_Preparation_DrinkMaking_WaitingForInfusion:
				order_part_Preparation_DrinkMaking_WaitingForInfusion_react(true);
				break;
			case order_part_Preparation_DrinkMaking_SachetWithdrawal:
				order_part_Preparation_DrinkMaking_SachetWithdrawal_react(true);
				break;
			case order_part_waitingForRecuperation:
				order_part_waitingForRecuperation_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public synchronized void exit() {
		exitSequence_Order_part();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NullState$||stateVector[1] != State.$NullState$||stateVector[2] != State.$NullState$||stateVector[3] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCInterface.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case order_part_Rdy_for_order:
			return stateVector[0].ordinal() >= State.
					order_part_Rdy_for_order.ordinal()&& stateVector[0].ordinal() <= State.order_part_Rdy_for_order_PaymentGestion_paimentChecked.ordinal();
		case order_part_Rdy_for_order_NoActionDetection_NoActionDetected:
			return stateVector[0] == State.order_part_Rdy_for_order_NoActionDetection_NoActionDetected;
		case order_part_Rdy_for_order_NoActionDetection_ActionDetected:
			return stateVector[0] == State.order_part_Rdy_for_order_NoActionDetection_ActionDetected;
		case order_part_Rdy_for_order_SlidersGestion_SlidersDefault:
			return stateVector[1] == State.order_part_Rdy_for_order_SlidersGestion_SlidersDefault;
		case order_part_Rdy_for_order_SlidersGestion_SlidersCustomed:
			return stateVector[1] == State.order_part_Rdy_for_order_SlidersGestion_SlidersCustomed;
		case order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectedWaiting:
			return stateVector[2] == State.order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectedWaiting;
		case order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected:
			return stateVector[2] == State.order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected;
		case order_part_Rdy_for_order_PaymentGestion_PaymentWaiting:
			return stateVector[3] == State.order_part_Rdy_for_order_PaymentGestion_PaymentWaiting;
		case order_part_Rdy_for_order_PaymentGestion_PaimentNFC:
			return stateVector[3] == State.order_part_Rdy_for_order_PaymentGestion_PaimentNFC;
		case order_part_Rdy_for_order_PaymentGestion_CheckPayment:
			return stateVector[3] == State.order_part_Rdy_for_order_PaymentGestion_CheckPayment;
		case order_part_Rdy_for_order_PaymentGestion_paimentChecked:
			return stateVector[3] == State.order_part_Rdy_for_order_PaymentGestion_paimentChecked;
		case order_part_Preparation:
			return stateVector[0].ordinal() >= State.
					order_part_Preparation.ordinal()&& stateVector[0].ordinal() <= State.order_part_Preparation_DrinkMaking_SachetWithdrawal.ordinal();
		case order_part_Preparation_DrinkMaking_Initialization:
			return stateVector[0] == State.order_part_Preparation_DrinkMaking_Initialization;
		case order_part_Preparation_DrinkMaking_PodPositionning___WaterHeating:
			return stateVector[0] == State.order_part_Preparation_DrinkMaking_PodPositionning___WaterHeating;
		case order_part_Preparation_DrinkMaking_GrainMashing___WaterHeating:
			return stateVector[0] == State.order_part_Preparation_DrinkMaking_GrainMashing___WaterHeating;
		case order_part_Preparation_DrinkMaking_SachetPositionning___WaterHeating:
			return stateVector[0] == State.order_part_Preparation_DrinkMaking_SachetPositionning___WaterHeating;
		case order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning:
			return stateVector[0] == State.order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning;
		case order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForSize:
			return stateVector[0] == State.order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForSize;
		case order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning___GrainTamping:
			return stateVector[0] == State.order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning___GrainTamping;
		case order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForTime:
			return stateVector[0] == State.order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForTime;
		case order_part_Preparation_DrinkMaking_WaitingForInfusion:
			return stateVector[0] == State.order_part_Preparation_DrinkMaking_WaitingForInfusion;
		case order_part_Preparation_DrinkMaking_SachetWithdrawal:
			return stateVector[0] == State.order_part_Preparation_DrinkMaking_SachetWithdrawal;
		case order_part_waitingForRecuperation:
			return stateVector[0] == State.order_part_waitingForRecuperation;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public synchronized void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public synchronized void timeElapsed(int eventID) {
		timeEvents[eventID] = true;
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public synchronized void raiseOrderDelivered() {
		sCInterface.raiseOrderDelivered();
	}
	
	public synchronized void raiseSliderModified() {
		sCInterface.raiseSliderModified();
	}
	
	public synchronized void raiseRemoveCup() {
		sCInterface.raiseRemoveCup();
	}
	
	public synchronized void raiseDrinkSelectionDone() {
		sCInterface.raiseDrinkSelectionDone();
	}
	
	public synchronized void raiseAddCoin() {
		sCInterface.raiseAddCoin();
	}
	
	public synchronized void raiseNotEnough() {
		sCInterface.raiseNotEnough();
	}
	
	public synchronized void raiseCancel() {
		sCInterface.raiseCancel();
	}
	
	public synchronized void raiseNFC() {
		sCInterface.raiseNFC();
	}
	
	public synchronized void raiseExpresso() {
		sCInterface.raiseExpresso();
	}
	
	public synchronized void raiseTea() {
		sCInterface.raiseTea();
	}
	
	public synchronized void raiseOkForExpressoStep2() {
		sCInterface.raiseOkForExpressoStep2();
	}
	
	public synchronized void raiseOkForExpressoStep3() {
		sCInterface.raiseOkForExpressoStep3();
	}
	
	public synchronized void raiseOkForTeaStep2() {
		sCInterface.raiseOkForTeaStep2();
	}
	
	public synchronized void raiseOkForTeaStep3() {
		sCInterface.raiseOkForTeaStep3();
	}
	
	public synchronized void raiseOkForTeaStep4() {
		sCInterface.raiseOkForTeaStep4();
	}
	
	public synchronized void raiseOkForTeaStep5() {
		sCInterface.raiseOkForTeaStep5();
	}
	
	public synchronized boolean isRaisedDoPrepareForNextOrder() {
		return sCInterface.isRaisedDoPrepareForNextOrder();
	}
	
	public synchronized boolean isRaisedDoResetDrinkSelected() {
		return sCInterface.isRaisedDoResetDrinkSelected();
	}
	
	public synchronized boolean isRaisedDoResetPayment() {
		return sCInterface.isRaisedDoResetPayment();
	}
	
	public synchronized boolean isRaisedDoCheckPayment() {
		return sCInterface.isRaisedDoCheckPayment();
	}
	
	public synchronized boolean isRaisedDoStartPreparation() {
		return sCInterface.isRaisedDoStartPreparation();
	}
	
	public synchronized boolean isRaisedDoResetSliders() {
		return sCInterface.isRaisedDoResetSliders();
	}
	
	public synchronized boolean isRaisedDoWaitForRecuperation() {
		return sCInterface.isRaisedDoWaitForRecuperation();
	}
	
	public synchronized boolean isRaisedNoActionFor45sec() {
		return sCInterface.isRaisedNoActionFor45sec();
	}
	
	public synchronized boolean isRaisedDoNextPreparationStep() {
		return sCInterface.isRaisedDoNextPreparationStep();
	}
	
	public synchronized boolean getCoffee() {
		return sCInterface.getCoffee();
	}
	
	public synchronized void setCoffee(boolean value) {
		sCInterface.setCoffee(value);
	}
	
	public synchronized boolean getOkForCoffeeStep2() {
		return sCInterface.getOkForCoffeeStep2();
	}
	
	public synchronized void setOkForCoffeeStep2(boolean value) {
		sCInterface.setOkForCoffeeStep2(value);
	}
	
	public synchronized boolean getOkForCoffeeStep3() {
		return sCInterface.getOkForCoffeeStep3();
	}
	
	public synchronized void setOkForCoffeeStep3(boolean value) {
		sCInterface.setOkForCoffeeStep3(value);
	}
	
	public synchronized boolean getReadyToDeliver() {
		return sCInterface.getReadyToDeliver();
	}
	
	public synchronized void setReadyToDeliver(boolean value) {
		sCInterface.setReadyToDeliver(value);
	}
	
	public synchronized boolean getPaymentChecked() {
		return sCInterface.getPaymentChecked();
	}
	
	public synchronized void setPaymentChecked(boolean value) {
		sCInterface.setPaymentChecked(value);
	}
	
	private void effect_Order_part_Preparation_tr0() {
		exitSequence_Order_part_Preparation();
		enterSequence_Order_part_waitingForRecuperation_default();
		react();
	}
	
	/* Entry action for state 'ActionDetected'. */
	private void entryAction_Order_part_Rdy_for_order_NoActionDetection_ActionDetected() {
		timer.setTimer(this, 0, (10 * 1000), false);
	}
	
	/* Entry action for state 'CheckPayment'. */
	private void entryAction_Order_part_Rdy_for_order_PaymentGestion_CheckPayment() {
		timer.setTimer(this, 1, 200, true);
		
		sCInterface.raiseDoCheckPayment();
	}
	
	/* Entry action for state 'Initialization'. */
	private void entryAction_Order_part_Preparation_DrinkMaking_Initialization() {
		timer.setTimer(this, 2, 200, true);
	}
	
	/* Entry action for state 'PodPositionning & WaterHeating'. */
	private void entryAction_Order_part_Preparation_DrinkMaking_PodPositionning___WaterHeating() {
		timer.setTimer(this, 3, 200, true);
		
		sCInterface.raiseDoNextPreparationStep();
	}
	
	/* Entry action for state 'WaitingForTemperature & CupPositionning'. */
	private void entryAction_Order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning() {
		timer.setTimer(this, 4, 200, true);
		
		sCInterface.raiseDoNextPreparationStep();
	}
	
	/* Entry action for state 'SugarTheDrink & PooringWaterForSize'. */
	private void entryAction_Order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForSize() {
		timer.setTimer(this, 5, 200, true);
		
		sCInterface.raiseDoNextPreparationStep();
	}
	
	/* Entry action for state 'SugarTheDrink & PooringWaterForTime'. */
	private void entryAction_Order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForTime() {
		timer.setTimer(this, 6, 200, true);
	}
	
	/* Entry action for state 'SachetWithdrawal'. */
	private void entryAction_Order_part_Preparation_DrinkMaking_SachetWithdrawal() {
		timer.setTimer(this, 7, 200, true);
	}
	
	/* Entry action for state 'waitingForRecuperation'. */
	private void entryAction_Order_part_waitingForRecuperation() {
		sCInterface.raiseDoWaitForRecuperation();
	}
	
	/* Exit action for state 'ActionDetected'. */
	private void exitAction_Order_part_Rdy_for_order_NoActionDetection_ActionDetected() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'CheckPayment'. */
	private void exitAction_Order_part_Rdy_for_order_PaymentGestion_CheckPayment() {
		timer.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'Initialization'. */
	private void exitAction_Order_part_Preparation_DrinkMaking_Initialization() {
		timer.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'PodPositionning & WaterHeating'. */
	private void exitAction_Order_part_Preparation_DrinkMaking_PodPositionning___WaterHeating() {
		timer.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'WaitingForTemperature & CupPositionning'. */
	private void exitAction_Order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning() {
		timer.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'SugarTheDrink & PooringWaterForSize'. */
	private void exitAction_Order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForSize() {
		timer.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'SugarTheDrink & PooringWaterForTime'. */
	private void exitAction_Order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForTime() {
		timer.unsetTimer(this, 6);
	}
	
	/* Exit action for state 'SachetWithdrawal'. */
	private void exitAction_Order_part_Preparation_DrinkMaking_SachetWithdrawal() {
		timer.unsetTimer(this, 7);
	}
	
	/* 'default' enter sequence for state Rdy for order */
	private void enterSequence_Order_part_Rdy_for_order_default() {
		enterSequence_Order_part_Rdy_for_order_NoActionDetection_default();
		enterSequence_Order_part_Rdy_for_order_SlidersGestion_default();
		enterSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_default();
		enterSequence_Order_part_Rdy_for_order_PaymentGestion_default();
	}
	
	/* 'default' enter sequence for state NoActionDetected */
	private void enterSequence_Order_part_Rdy_for_order_NoActionDetection_NoActionDetected_default() {
		nextStateIndex = 0;
		stateVector[0] = State.order_part_Rdy_for_order_NoActionDetection_NoActionDetected;
	}
	
	/* 'default' enter sequence for state ActionDetected */
	private void enterSequence_Order_part_Rdy_for_order_NoActionDetection_ActionDetected_default() {
		entryAction_Order_part_Rdy_for_order_NoActionDetection_ActionDetected();
		nextStateIndex = 0;
		stateVector[0] = State.order_part_Rdy_for_order_NoActionDetection_ActionDetected;
	}
	
	/* 'default' enter sequence for state SlidersDefault */
	private void enterSequence_Order_part_Rdy_for_order_SlidersGestion_SlidersDefault_default() {
		nextStateIndex = 1;
		stateVector[1] = State.order_part_Rdy_for_order_SlidersGestion_SlidersDefault;
	}
	
	/* 'default' enter sequence for state SlidersCustomed */
	private void enterSequence_Order_part_Rdy_for_order_SlidersGestion_SlidersCustomed_default() {
		nextStateIndex = 1;
		stateVector[1] = State.order_part_Rdy_for_order_SlidersGestion_SlidersCustomed;
	}
	
	/* 'default' enter sequence for state DrinkSelectedWaiting */
	private void enterSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectedWaiting_default() {
		nextStateIndex = 2;
		stateVector[2] = State.order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectedWaiting;
	}
	
	/* 'default' enter sequence for state DrinkSelected */
	private void enterSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected_default() {
		nextStateIndex = 2;
		stateVector[2] = State.order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected;
	}
	
	/* 'default' enter sequence for state PaymentWaiting */
	private void enterSequence_Order_part_Rdy_for_order_PaymentGestion_PaymentWaiting_default() {
		nextStateIndex = 3;
		stateVector[3] = State.order_part_Rdy_for_order_PaymentGestion_PaymentWaiting;
	}
	
	/* 'default' enter sequence for state PaimentNFC */
	private void enterSequence_Order_part_Rdy_for_order_PaymentGestion_PaimentNFC_default() {
		nextStateIndex = 3;
		stateVector[3] = State.order_part_Rdy_for_order_PaymentGestion_PaimentNFC;
	}
	
	/* 'default' enter sequence for state CheckPayment */
	private void enterSequence_Order_part_Rdy_for_order_PaymentGestion_CheckPayment_default() {
		entryAction_Order_part_Rdy_for_order_PaymentGestion_CheckPayment();
		nextStateIndex = 3;
		stateVector[3] = State.order_part_Rdy_for_order_PaymentGestion_CheckPayment;
	}
	
	/* 'default' enter sequence for state paimentChecked */
	private void enterSequence_Order_part_Rdy_for_order_PaymentGestion_paimentChecked_default() {
		nextStateIndex = 3;
		stateVector[3] = State.order_part_Rdy_for_order_PaymentGestion_paimentChecked;
	}
	
	/* 'default' enter sequence for state Preparation */
	private void enterSequence_Order_part_Preparation_default() {
		enterSequence_Order_part_Preparation_DrinkMaking_default();
	}
	
	/* 'default' enter sequence for state Initialization */
	private void enterSequence_Order_part_Preparation_DrinkMaking_Initialization_default() {
		entryAction_Order_part_Preparation_DrinkMaking_Initialization();
		nextStateIndex = 0;
		stateVector[0] = State.order_part_Preparation_DrinkMaking_Initialization;
	}
	
	/* 'default' enter sequence for state PodPositionning & WaterHeating */
	private void enterSequence_Order_part_Preparation_DrinkMaking_PodPositionning___WaterHeating_default() {
		entryAction_Order_part_Preparation_DrinkMaking_PodPositionning___WaterHeating();
		nextStateIndex = 0;
		stateVector[0] = State.order_part_Preparation_DrinkMaking_PodPositionning___WaterHeating;
	}
	
	/* 'default' enter sequence for state GrainMashing & WaterHeating */
	private void enterSequence_Order_part_Preparation_DrinkMaking_GrainMashing___WaterHeating_default() {
		nextStateIndex = 0;
		stateVector[0] = State.order_part_Preparation_DrinkMaking_GrainMashing___WaterHeating;
	}
	
	/* 'default' enter sequence for state SachetPositionning & WaterHeating */
	private void enterSequence_Order_part_Preparation_DrinkMaking_SachetPositionning___WaterHeating_default() {
		nextStateIndex = 0;
		stateVector[0] = State.order_part_Preparation_DrinkMaking_SachetPositionning___WaterHeating;
	}
	
	/* 'default' enter sequence for state WaitingForTemperature & CupPositionning */
	private void enterSequence_Order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning_default() {
		entryAction_Order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning();
		nextStateIndex = 0;
		stateVector[0] = State.order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning;
	}
	
	/* 'default' enter sequence for state SugarTheDrink & PooringWaterForSize */
	private void enterSequence_Order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForSize_default() {
		entryAction_Order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForSize();
		nextStateIndex = 0;
		stateVector[0] = State.order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForSize;
	}
	
	/* 'default' enter sequence for state WaitingForTemperature & CupPositionning & GrainTamping */
	private void enterSequence_Order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning___GrainTamping_default() {
		nextStateIndex = 0;
		stateVector[0] = State.order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning___GrainTamping;
	}
	
	/* 'default' enter sequence for state SugarTheDrink & PooringWaterForTime */
	private void enterSequence_Order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForTime_default() {
		entryAction_Order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForTime();
		nextStateIndex = 0;
		stateVector[0] = State.order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForTime;
	}
	
	/* 'default' enter sequence for state WaitingForInfusion */
	private void enterSequence_Order_part_Preparation_DrinkMaking_WaitingForInfusion_default() {
		nextStateIndex = 0;
		stateVector[0] = State.order_part_Preparation_DrinkMaking_WaitingForInfusion;
	}
	
	/* 'default' enter sequence for state SachetWithdrawal */
	private void enterSequence_Order_part_Preparation_DrinkMaking_SachetWithdrawal_default() {
		entryAction_Order_part_Preparation_DrinkMaking_SachetWithdrawal();
		nextStateIndex = 0;
		stateVector[0] = State.order_part_Preparation_DrinkMaking_SachetWithdrawal;
	}
	
	/* 'default' enter sequence for state waitingForRecuperation */
	private void enterSequence_Order_part_waitingForRecuperation_default() {
		entryAction_Order_part_waitingForRecuperation();
		nextStateIndex = 0;
		stateVector[0] = State.order_part_waitingForRecuperation;
	}
	
	/* 'default' enter sequence for region Order part */
	private void enterSequence_Order_part_default() {
		react_Order_part__entry_Default();
	}
	
	/* 'default' enter sequence for region NoActionDetection */
	private void enterSequence_Order_part_Rdy_for_order_NoActionDetection_default() {
		react_Order_part_Rdy_for_order_NoActionDetection__entry_Default();
	}
	
	/* 'default' enter sequence for region SlidersGestion */
	private void enterSequence_Order_part_Rdy_for_order_SlidersGestion_default() {
		react_Order_part_Rdy_for_order_SlidersGestion__entry_Default();
	}
	
	/* 'default' enter sequence for region DrinkSelectionGestion */
	private void enterSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_default() {
		react_Order_part_Rdy_for_order_DrinkSelectionGestion__entry_Default();
	}
	
	/* 'default' enter sequence for region PaymentGestion */
	private void enterSequence_Order_part_Rdy_for_order_PaymentGestion_default() {
		react_Order_part_Rdy_for_order_PaymentGestion__entry_Default();
	}
	
	/* 'default' enter sequence for region DrinkMaking */
	private void enterSequence_Order_part_Preparation_DrinkMaking_default() {
		react_Order_part_Preparation_DrinkMaking__entry_Default();
	}
	
	/* Default exit sequence for state Rdy for order */
	private void exitSequence_Order_part_Rdy_for_order() {
		exitSequence_Order_part_Rdy_for_order_NoActionDetection();
		exitSequence_Order_part_Rdy_for_order_SlidersGestion();
		exitSequence_Order_part_Rdy_for_order_DrinkSelectionGestion();
		exitSequence_Order_part_Rdy_for_order_PaymentGestion();
	}
	
	/* Default exit sequence for state NoActionDetected */
	private void exitSequence_Order_part_Rdy_for_order_NoActionDetection_NoActionDetected() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state ActionDetected */
	private void exitSequence_Order_part_Rdy_for_order_NoActionDetection_ActionDetected() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Order_part_Rdy_for_order_NoActionDetection_ActionDetected();
	}
	
	/* Default exit sequence for state SlidersDefault */
	private void exitSequence_Order_part_Rdy_for_order_SlidersGestion_SlidersDefault() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state SlidersCustomed */
	private void exitSequence_Order_part_Rdy_for_order_SlidersGestion_SlidersCustomed() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state DrinkSelectedWaiting */
	private void exitSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectedWaiting() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state DrinkSelected */
	private void exitSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state PaymentWaiting */
	private void exitSequence_Order_part_Rdy_for_order_PaymentGestion_PaymentWaiting() {
		nextStateIndex = 3;
		stateVector[3] = State.$NullState$;
	}
	
	/* Default exit sequence for state PaimentNFC */
	private void exitSequence_Order_part_Rdy_for_order_PaymentGestion_PaimentNFC() {
		nextStateIndex = 3;
		stateVector[3] = State.$NullState$;
	}
	
	/* Default exit sequence for state CheckPayment */
	private void exitSequence_Order_part_Rdy_for_order_PaymentGestion_CheckPayment() {
		nextStateIndex = 3;
		stateVector[3] = State.$NullState$;
		
		exitAction_Order_part_Rdy_for_order_PaymentGestion_CheckPayment();
	}
	
	/* Default exit sequence for state paimentChecked */
	private void exitSequence_Order_part_Rdy_for_order_PaymentGestion_paimentChecked() {
		nextStateIndex = 3;
		stateVector[3] = State.$NullState$;
	}
	
	/* Default exit sequence for state Preparation */
	private void exitSequence_Order_part_Preparation() {
		exitSequence_Order_part_Preparation_DrinkMaking();
	}
	
	/* Default exit sequence for state Initialization */
	private void exitSequence_Order_part_Preparation_DrinkMaking_Initialization() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Order_part_Preparation_DrinkMaking_Initialization();
	}
	
	/* Default exit sequence for state PodPositionning & WaterHeating */
	private void exitSequence_Order_part_Preparation_DrinkMaking_PodPositionning___WaterHeating() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Order_part_Preparation_DrinkMaking_PodPositionning___WaterHeating();
	}
	
	/* Default exit sequence for state GrainMashing & WaterHeating */
	private void exitSequence_Order_part_Preparation_DrinkMaking_GrainMashing___WaterHeating() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state SachetPositionning & WaterHeating */
	private void exitSequence_Order_part_Preparation_DrinkMaking_SachetPositionning___WaterHeating() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state WaitingForTemperature & CupPositionning */
	private void exitSequence_Order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning();
	}
	
	/* Default exit sequence for state SugarTheDrink & PooringWaterForSize */
	private void exitSequence_Order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForSize() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForSize();
	}
	
	/* Default exit sequence for state WaitingForTemperature & CupPositionning & GrainTamping */
	private void exitSequence_Order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning___GrainTamping() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state SugarTheDrink & PooringWaterForTime */
	private void exitSequence_Order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForTime() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForTime();
	}
	
	/* Default exit sequence for state WaitingForInfusion */
	private void exitSequence_Order_part_Preparation_DrinkMaking_WaitingForInfusion() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state SachetWithdrawal */
	private void exitSequence_Order_part_Preparation_DrinkMaking_SachetWithdrawal() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Order_part_Preparation_DrinkMaking_SachetWithdrawal();
	}
	
	/* Default exit sequence for state waitingForRecuperation */
	private void exitSequence_Order_part_waitingForRecuperation() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region Order part */
	private void exitSequence_Order_part() {
		switch (stateVector[0]) {
		case order_part_Rdy_for_order_NoActionDetection_NoActionDetected:
			exitSequence_Order_part_Rdy_for_order_NoActionDetection_NoActionDetected();
			break;
		case order_part_Rdy_for_order_NoActionDetection_ActionDetected:
			exitSequence_Order_part_Rdy_for_order_NoActionDetection_ActionDetected();
			break;
		case order_part_Preparation_DrinkMaking_Initialization:
			exitSequence_Order_part_Preparation_DrinkMaking_Initialization();
			break;
		case order_part_Preparation_DrinkMaking_PodPositionning___WaterHeating:
			exitSequence_Order_part_Preparation_DrinkMaking_PodPositionning___WaterHeating();
			break;
		case order_part_Preparation_DrinkMaking_GrainMashing___WaterHeating:
			exitSequence_Order_part_Preparation_DrinkMaking_GrainMashing___WaterHeating();
			break;
		case order_part_Preparation_DrinkMaking_SachetPositionning___WaterHeating:
			exitSequence_Order_part_Preparation_DrinkMaking_SachetPositionning___WaterHeating();
			break;
		case order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning:
			exitSequence_Order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning();
			break;
		case order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForSize:
			exitSequence_Order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForSize();
			break;
		case order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning___GrainTamping:
			exitSequence_Order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning___GrainTamping();
			break;
		case order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForTime:
			exitSequence_Order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForTime();
			break;
		case order_part_Preparation_DrinkMaking_WaitingForInfusion:
			exitSequence_Order_part_Preparation_DrinkMaking_WaitingForInfusion();
			break;
		case order_part_Preparation_DrinkMaking_SachetWithdrawal:
			exitSequence_Order_part_Preparation_DrinkMaking_SachetWithdrawal();
			break;
		case order_part_waitingForRecuperation:
			exitSequence_Order_part_waitingForRecuperation();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case order_part_Rdy_for_order_SlidersGestion_SlidersDefault:
			exitSequence_Order_part_Rdy_for_order_SlidersGestion_SlidersDefault();
			break;
		case order_part_Rdy_for_order_SlidersGestion_SlidersCustomed:
			exitSequence_Order_part_Rdy_for_order_SlidersGestion_SlidersCustomed();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectedWaiting:
			exitSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectedWaiting();
			break;
		case order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected:
			exitSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected();
			break;
		default:
			break;
		}
		
		switch (stateVector[3]) {
		case order_part_Rdy_for_order_PaymentGestion_PaymentWaiting:
			exitSequence_Order_part_Rdy_for_order_PaymentGestion_PaymentWaiting();
			break;
		case order_part_Rdy_for_order_PaymentGestion_PaimentNFC:
			exitSequence_Order_part_Rdy_for_order_PaymentGestion_PaimentNFC();
			break;
		case order_part_Rdy_for_order_PaymentGestion_CheckPayment:
			exitSequence_Order_part_Rdy_for_order_PaymentGestion_CheckPayment();
			break;
		case order_part_Rdy_for_order_PaymentGestion_paimentChecked:
			exitSequence_Order_part_Rdy_for_order_PaymentGestion_paimentChecked();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region NoActionDetection */
	private void exitSequence_Order_part_Rdy_for_order_NoActionDetection() {
		switch (stateVector[0]) {
		case order_part_Rdy_for_order_NoActionDetection_NoActionDetected:
			exitSequence_Order_part_Rdy_for_order_NoActionDetection_NoActionDetected();
			break;
		case order_part_Rdy_for_order_NoActionDetection_ActionDetected:
			exitSequence_Order_part_Rdy_for_order_NoActionDetection_ActionDetected();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region SlidersGestion */
	private void exitSequence_Order_part_Rdy_for_order_SlidersGestion() {
		switch (stateVector[1]) {
		case order_part_Rdy_for_order_SlidersGestion_SlidersDefault:
			exitSequence_Order_part_Rdy_for_order_SlidersGestion_SlidersDefault();
			break;
		case order_part_Rdy_for_order_SlidersGestion_SlidersCustomed:
			exitSequence_Order_part_Rdy_for_order_SlidersGestion_SlidersCustomed();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region DrinkSelectionGestion */
	private void exitSequence_Order_part_Rdy_for_order_DrinkSelectionGestion() {
		switch (stateVector[2]) {
		case order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectedWaiting:
			exitSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectedWaiting();
			break;
		case order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected:
			exitSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region PaymentGestion */
	private void exitSequence_Order_part_Rdy_for_order_PaymentGestion() {
		switch (stateVector[3]) {
		case order_part_Rdy_for_order_PaymentGestion_PaymentWaiting:
			exitSequence_Order_part_Rdy_for_order_PaymentGestion_PaymentWaiting();
			break;
		case order_part_Rdy_for_order_PaymentGestion_PaimentNFC:
			exitSequence_Order_part_Rdy_for_order_PaymentGestion_PaimentNFC();
			break;
		case order_part_Rdy_for_order_PaymentGestion_CheckPayment:
			exitSequence_Order_part_Rdy_for_order_PaymentGestion_CheckPayment();
			break;
		case order_part_Rdy_for_order_PaymentGestion_paimentChecked:
			exitSequence_Order_part_Rdy_for_order_PaymentGestion_paimentChecked();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region DrinkMaking */
	private void exitSequence_Order_part_Preparation_DrinkMaking() {
		switch (stateVector[0]) {
		case order_part_Preparation_DrinkMaking_Initialization:
			exitSequence_Order_part_Preparation_DrinkMaking_Initialization();
			break;
		case order_part_Preparation_DrinkMaking_PodPositionning___WaterHeating:
			exitSequence_Order_part_Preparation_DrinkMaking_PodPositionning___WaterHeating();
			break;
		case order_part_Preparation_DrinkMaking_GrainMashing___WaterHeating:
			exitSequence_Order_part_Preparation_DrinkMaking_GrainMashing___WaterHeating();
			break;
		case order_part_Preparation_DrinkMaking_SachetPositionning___WaterHeating:
			exitSequence_Order_part_Preparation_DrinkMaking_SachetPositionning___WaterHeating();
			break;
		case order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning:
			exitSequence_Order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning();
			break;
		case order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForSize:
			exitSequence_Order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForSize();
			break;
		case order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning___GrainTamping:
			exitSequence_Order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning___GrainTamping();
			break;
		case order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForTime:
			exitSequence_Order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForTime();
			break;
		case order_part_Preparation_DrinkMaking_WaitingForInfusion:
			exitSequence_Order_part_Preparation_DrinkMaking_WaitingForInfusion();
			break;
		case order_part_Preparation_DrinkMaking_SachetWithdrawal:
			exitSequence_Order_part_Preparation_DrinkMaking_SachetWithdrawal();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_Order_part__entry_Default() {
		enterSequence_Order_part_Rdy_for_order_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Order_part_Rdy_for_order_NoActionDetection__entry_Default() {
		enterSequence_Order_part_Rdy_for_order_NoActionDetection_NoActionDetected_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Order_part_Rdy_for_order_SlidersGestion__entry_Default() {
		enterSequence_Order_part_Rdy_for_order_SlidersGestion_SlidersDefault_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Order_part_Rdy_for_order_DrinkSelectionGestion__entry_Default() {
		enterSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectedWaiting_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Order_part_Rdy_for_order_PaymentGestion__entry_Default() {
		enterSequence_Order_part_Rdy_for_order_PaymentGestion_PaymentWaiting_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Order_part_Preparation_DrinkMaking__entry_Default() {
		enterSequence_Order_part_Preparation_DrinkMaking_Initialization_default();
	}
	
	/* The reactions of exit default. */
	private void react_Order_part_Preparation_DrinkMaking__exit_Default() {
		effect_Order_part_Preparation_tr0();
	}
	
	/* The reactions of state null. */
	private void react_Order_part__sync0() {
		sCInterface.raiseDoStartPreparation();
		
		enterSequence_Order_part_Preparation_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean order_part_Rdy_for_order_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean order_part_Rdy_for_order_NoActionDetection_NoActionDetected_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.sliderModified || (sCInterface.drinkSelectionDone || (sCInterface.nFC || (sCInterface.addCoin || sCInterface.cancel))))) {
				exitSequence_Order_part_Rdy_for_order_NoActionDetection_NoActionDetected();
				enterSequence_Order_part_Rdy_for_order_NoActionDetection_ActionDetected_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean order_part_Rdy_for_order_NoActionDetection_ActionDetected_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[0]) {
				exitSequence_Order_part_Rdy_for_order_NoActionDetection_ActionDetected();
				sCInterface.raiseNoActionFor45sec();
				
				enterSequence_Order_part_Rdy_for_order_NoActionDetection_NoActionDetected_default();
			} else {
				if ((sCInterface.sliderModified || (sCInterface.drinkSelectionDone || (sCInterface.nFC || (sCInterface.addCoin || sCInterface.cancel))))) {
					exitSequence_Order_part_Rdy_for_order_NoActionDetection_ActionDetected();
					enterSequence_Order_part_Rdy_for_order_NoActionDetection_ActionDetected_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean order_part_Rdy_for_order_SlidersGestion_SlidersDefault_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.sliderModified) {
				exitSequence_Order_part_Rdy_for_order_SlidersGestion_SlidersDefault();
				enterSequence_Order_part_Rdy_for_order_SlidersGestion_SlidersCustomed_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean order_part_Rdy_for_order_SlidersGestion_SlidersCustomed_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.noActionFor45sec) {
				exitSequence_Order_part_Rdy_for_order_SlidersGestion_SlidersCustomed();
				sCInterface.raiseDoResetSliders();
				
				enterSequence_Order_part_Rdy_for_order_SlidersGestion_SlidersDefault_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectedWaiting_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.drinkSelectionDone) {
				exitSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectedWaiting();
				enterSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.noActionFor45sec) {
				exitSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected();
				sCInterface.raiseDoResetDrinkSelected();
				
				enterSequence_Order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelectedWaiting_default();
			} else {
				if (isStateActive(State.order_part_Rdy_for_order_PaymentGestion_paimentChecked)) {
					exitSequence_Order_part_Rdy_for_order();
					react_Order_part__sync0();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean order_part_Rdy_for_order_PaymentGestion_PaymentWaiting_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.nFC) {
				exitSequence_Order_part_Rdy_for_order_PaymentGestion_PaymentWaiting();
				enterSequence_Order_part_Rdy_for_order_PaymentGestion_PaimentNFC_default();
				order_part_Rdy_for_order_react(false);
			} else {
				if (sCInterface.addCoin) {
					exitSequence_Order_part_Rdy_for_order_PaymentGestion_PaymentWaiting();
					enterSequence_Order_part_Rdy_for_order_PaymentGestion_CheckPayment_default();
					order_part_Rdy_for_order_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = order_part_Rdy_for_order_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Rdy_for_order_PaymentGestion_PaimentNFC_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			exitSequence_Order_part_Rdy_for_order_PaymentGestion_PaimentNFC();
			enterSequence_Order_part_Rdy_for_order_PaymentGestion_paimentChecked_default();
			order_part_Rdy_for_order_react(false);
		}
		if (did_transition==false) {
			did_transition = order_part_Rdy_for_order_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Rdy_for_order_PaymentGestion_CheckPayment_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.noActionFor45sec || sCInterface.cancel)) {
				exitSequence_Order_part_Rdy_for_order_PaymentGestion_CheckPayment();
				sCInterface.raiseDoResetPayment();
				
				enterSequence_Order_part_Rdy_for_order_PaymentGestion_PaymentWaiting_default();
				order_part_Rdy_for_order_react(false);
			} else {
				if (((timeEvents[1]) && (sCInterface.getPaymentChecked()))) {
					exitSequence_Order_part_Rdy_for_order_PaymentGestion_CheckPayment();
					enterSequence_Order_part_Rdy_for_order_PaymentGestion_paimentChecked_default();
					order_part_Rdy_for_order_react(false);
				} else {
					if (sCInterface.addCoin) {
						exitSequence_Order_part_Rdy_for_order_PaymentGestion_CheckPayment();
						enterSequence_Order_part_Rdy_for_order_PaymentGestion_CheckPayment_default();
						order_part_Rdy_for_order_react(false);
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = order_part_Rdy_for_order_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Rdy_for_order_PaymentGestion_paimentChecked_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.noActionFor45sec || sCInterface.cancel)) {
				exitSequence_Order_part_Rdy_for_order_PaymentGestion_paimentChecked();
				sCInterface.raiseDoResetPayment();
				
				enterSequence_Order_part_Rdy_for_order_PaymentGestion_PaymentWaiting_default();
				order_part_Rdy_for_order_react(false);
			} else {
				if (isStateActive(State.order_part_Rdy_for_order_DrinkSelectionGestion_DrinkSelected)) {
					exitSequence_Order_part_Rdy_for_order();
					react_Order_part__sync0();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = order_part_Rdy_for_order_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_Initialization_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[2]) && (sCInterface.getCoffee()))) {
				exitSequence_Order_part_Preparation_DrinkMaking_Initialization();
				enterSequence_Order_part_Preparation_DrinkMaking_PodPositionning___WaterHeating_default();
				order_part_Preparation_react(false);
			} else {
				if (sCInterface.expresso) {
					exitSequence_Order_part_Preparation_DrinkMaking_Initialization();
					enterSequence_Order_part_Preparation_DrinkMaking_GrainMashing___WaterHeating_default();
					order_part_Preparation_react(false);
				} else {
					if (sCInterface.tea) {
						exitSequence_Order_part_Preparation_DrinkMaking_Initialization();
						enterSequence_Order_part_Preparation_DrinkMaking_SachetPositionning___WaterHeating_default();
						order_part_Preparation_react(false);
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = order_part_Preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_PodPositionning___WaterHeating_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[3]) && (sCInterface.getOkForCoffeeStep2()))) {
				exitSequence_Order_part_Preparation_DrinkMaking_PodPositionning___WaterHeating();
				enterSequence_Order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning_default();
				order_part_Preparation_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = order_part_Preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_GrainMashing___WaterHeating_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.okForExpressoStep2) {
				exitSequence_Order_part_Preparation_DrinkMaking_GrainMashing___WaterHeating();
				enterSequence_Order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning___GrainTamping_default();
				order_part_Preparation_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = order_part_Preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_SachetPositionning___WaterHeating_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.okForTeaStep2) {
				exitSequence_Order_part_Preparation_DrinkMaking_SachetPositionning___WaterHeating();
				enterSequence_Order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning_default();
				order_part_Preparation_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = order_part_Preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[4]) && (sCInterface.getOkForCoffeeStep3()))) {
				exitSequence_Order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning();
				enterSequence_Order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForSize_default();
				order_part_Preparation_react(false);
			} else {
				if (sCInterface.okForTeaStep3) {
					exitSequence_Order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning();
					enterSequence_Order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForSize_default();
					order_part_Preparation_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = order_part_Preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForSize_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[5]) && (sCInterface.getReadyToDeliver()))) {
				exitSequence_Order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForSize();
				react_Order_part_Preparation_DrinkMaking__exit_Default();
			} else {
				if (sCInterface.okForTeaStep4) {
					exitSequence_Order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForSize();
					enterSequence_Order_part_Preparation_DrinkMaking_WaitingForInfusion_default();
					order_part_Preparation_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = order_part_Preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning___GrainTamping_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.okForExpressoStep3) {
				exitSequence_Order_part_Preparation_DrinkMaking_WaitingForTemperature___CupPositionning___GrainTamping();
				enterSequence_Order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForTime_default();
				order_part_Preparation_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = order_part_Preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForTime_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[6]) && (sCInterface.getReadyToDeliver()))) {
				exitSequence_Order_part_Preparation_DrinkMaking_SugarTheDrink___PooringWaterForTime();
				react_Order_part_Preparation_DrinkMaking__exit_Default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = order_part_Preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_WaitingForInfusion_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.okForTeaStep5) {
				exitSequence_Order_part_Preparation_DrinkMaking_WaitingForInfusion();
				enterSequence_Order_part_Preparation_DrinkMaking_SachetWithdrawal_default();
				order_part_Preparation_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = order_part_Preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_Preparation_DrinkMaking_SachetWithdrawal_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[7]) && (sCInterface.getReadyToDeliver()))) {
				exitSequence_Order_part_Preparation_DrinkMaking_SachetWithdrawal();
				react_Order_part_Preparation_DrinkMaking__exit_Default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = order_part_Preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean order_part_waitingForRecuperation_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.removeCup) {
				exitSequence_Order_part_waitingForRecuperation();
				sCInterface.raiseDoPrepareForNextOrder();
				
				enterSequence_Order_part_Rdy_for_order_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
